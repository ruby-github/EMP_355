#ifndef MEASURE_DEF_H
#define MEASURE_DEF_H

#include <string>


//#define ZERO 0.000001

#define NOT_SAVE	0
#define SAVE	1

//获取测量值用的标记
#define IN_REPORT_MEAN	0	//在报告中计算计算函数根据系统设置获取测量值的平均值或最后值
#define IN_MEASURE	1	//在测量中计算函数获取测量值的最后值
#define IN_REPORT_ALL	2	//在报告中显示所有测量次数的测量值时获取所有测量值
#define IN_AVERAGE 3	//指定获取平均值

//产科胎儿1
#define FETAL_BY_SET	0	//产科菜单中当前的胎儿
#define FETAL1	1	//直接指定胎儿1
#define FETAL2	2	//直接指定胎儿2

#define INVALID_VAL 999999
#define INVALID_VAL_GW (INVALID_VAL + 1)
#define MULTI_SIGN	(INVALID_VAL + 999999)//存在有多项测量的测量项的MeaResultAbd关于本项的第一个地址内，用于标记是否是一个有多个测量值的测量项
#define SINGLE_SIGN	MULTI_SIGN

#define MEA_ERROR	-1
#define MEA_SUCCESS	1
#define MEA_FAIL	0

#define MEA_TIMES 3	//软件包中每项测量的测量次数（即最多保存结果的个数）
#define MEA_MULTI 4	//有多个测量值的测量项现在最多为两个测量值，再加上计算出来的两个值则为4
#define MEA_TIMES_MULTI (MEA_TIMES * MEA_MULTI)	//软件包中含两个测量值的测量项包括计算出来的测量值（如RI）则要保存9个结果

#define MEA_SINGLE 1	//只有单个测量的测量项则只有1个测量值
#define CALC_MAX 15	//每个测量涉及到的计算最多有15项
#define SINGLE_MAX (MEA_SINGLE + CALC_MAX)	//则只有单个测量的测量项最多有11个结果
#define MULTI_MAX (MEA_MULTI + CALC_MAX)	//则有多个测量的测量项最多有14个结果

#define CALC_RESULT_CLASSES 2	//计算结果的种类为2种：最后值和平均值

#define USER_TABLE_START	31	//自定义产科表的起始天数


typedef struct{
	int item;
	float result[MEA_TIMES_MULTI];
}ResultMulti;

#define CALC_METHOD_MAX 9//计算方法最多定为9个
#define CALC_PAR_NUMS 5	//每个计算公式所用的参数最多为5个
#define NO_PAR	0	//CalcResultInfo.pars中不满5个的填充NO_PAR
#define CALC_FOR_CALC 2	//用一个计算值计算另一个计算值的情况，对同一个计算值至多可能计算两个计算值
typedef struct{
	int item;
	int pars[CALC_PAR_NUMS];
//	const void *hLevelInfo[CALC_FOR_CALC];
	const void *ptrHCalcInfo;
}CalcInfoTmp;

//测量的名称单位等传入
typedef int (*Calc)(CalcInfoTmp *, float data[], int, int, int*, const int);

typedef struct CalcResultInfo{
	const int item;
	int pars[CALC_PAR_NUMS];
	const char title[40]; //21
//	float data[MEA_TIMES];
	int unitItem;
	Calc calcFun;
//	const CalcResultInfo *calcInfo[CALC_FOR_CALC];
	const void *ptrHCalcInfo;
}CalcResultInfo;

typedef const CalcResultInfo *CalcMethodInfo[CALC_METHOD_MAX];

typedef struct{
	int item;
	int methodItem[CALC_METHOD_MAX];
//	const CalcResultInfo *ptrMethodInfo[CALC_METHOD_MAX];
	const CalcMethodInfo ptrMethodInfo;
}CalcMultiMethod;//有多种计算方法的计算项

typedef struct{
	int item;
	const CalcResultInfo *ptrCalcInfo;
}PtrOfCalcInfo;

typedef const CalcResultInfo *CalcInfoArray[];
typedef const CalcResultInfo *CalcInfoP[CALC_MAX];
typedef struct{
	int item;
	int meaType;
	char title[40]; //21
	int unitItem;
//	const CalcInfo *ptrCalcInfo;
//	const void * const ptrCalcInfo;
	const void *ptrCalcInfo;
}SingleItemInfo;

//==========================================
typedef struct{
	char title[11];
	int unitItem;
}titleUnitInfo;//在有多项测量的测量项中存储多项测量的标题和单位

typedef struct{
	int item;
	int multiItem;
	int meaType;
	char itemTitle[40];//21
//	titleUnitInfo titleUnit[MEA_MULTI];//在以多项测量为主的科别中，如果此项测量为单项测量，则titleUnit[MEA_MULTI-1].unitItem存储单项测量的枚举号
	const titleUnitInfo *titleUnit;//在以多项测量为主的科别中，如果此项测量为单项测量，则titleUnit[MEA_MULTI-1].unitItem存储单项测量的枚举号
	const void *ptrCalcInfo;
}MultiItemInfo;
//==========================================
#define MAX_USER_CALC_NUM 100

#ifdef VET
#define MEA_START 0
#define BASIC_MEA_START MEA_START
#define ABD_MEA_START BASIC_MEA_END
#define UR_MEA_START ABD_MEA_END
#define ADULT_MEA_START UR_MEA_END
#define FETAL_MEA_START ADULT_MEA_END
#define OB_MEA_START FETAL_MEA_END
#define GYN_MEA_START OB_MEA_END
#define SP_MEA_START GYN_MEA_END
#define VS_MEA_START SP_MEA_END
#define TCD_MEA_START VS_MEA_END
#define ORTHO_MEA_START TCD_MEA_END
#define TD_MEA_START ORTHO_MEA_END
#define ANOB_MEA_START TD_MEA_END
#define USER_START ANOB_MEA_END
#define USER_END (MAX_USER_CALC_NUM + ANOB_MEA_END)
#define MEA_END	USER_END
#else
#define MEA_START 0
#define BASIC_MEA_START MEA_START
#define ABD_MEA_START BASIC_MEA_END
#define UR_MEA_START ABD_MEA_END
#define ADULT_MEA_START UR_MEA_END
#define FETAL_MEA_START ADULT_MEA_END
#define OB_MEA_START FETAL_MEA_END
#define GYN_MEA_START OB_MEA_END
#define SP_MEA_START GYN_MEA_END
#define VS_MEA_START SP_MEA_END
#define TCD_MEA_START VS_MEA_END
#define ORTHO_MEA_START TCD_MEA_END
#define EFW_MEA_START ORTHO_MEA_END
#define USER_START EFW_MEA_END
#define USER_END (MAX_USER_CALC_NUM + ORTHO_MEA_END)
#define MEA_END	USER_END

#endif

/*
 * 本处需注意：此处MULTI_START定义必须至少大于EUNITS中的NOUNIT和上面最大的XXX_MEA_END:
 * (1)在以只有一个测量的测量项为主的科别中SingleItemInfo的unitItem用来存本项的单位（本项只有一个测量）
 * 或本项在EMultiXXX的枚举号（本项有多个测量），并通过此数值是否大于NOUNIT来区分
 * (2)在计算函数中用枚举号来区别本计算公式用的参数是单项测量还是多项测量的测量知
 * (以后把20000修改成MEA_END+1,但会挪动本文件很多枚举定义的位置)
 * */


#ifdef VET
#define MULTI_START (MEA_START + 20000)
#define BASIC_MULTI_START MULTI_START
#define ABD_MULTI_START BASIC_MULTI_END
#define UR_MULTI_START ABD_MULTI_END
#define ADULT_MULTI_START UR_MULTI_END
#define FETAL_MULTI_START ADULT_MULTI_END
#define OB_MULTI_START FETAL_MULTI_END
#define GYN_MULTI_START OB_MULTI_END
#define SP_MULTI_START GYN_MULTI_END
#define VS_MULTI_START SP_MULTI_END
#define TCD_MULTI_START VS_MULTI_END
#define ORTHO_MULTI_START TCD_MULTI_END
//#define MULTI_END	ORTHO_MULTI_END

/*#ifdef VET
#define	OB_MULTI_VET_START	ORTHO_MULTI_END
#define TENDON_MULTI_VET_START	OB_MULTI_VET_END
#define MULTI_END	OB_MULTI_VET_END
#else
#define MULTI_END	ORTHO_SINGLE_END
#endif
*/
//添加TD科别 的宏
//hlx 
//#ifdef VET
#define TD_MULTI_START ORTHO_MULTI_END
//hlx 
#define ANOB_MULTI_START TD_MULTI_END
////#define MULTI_END TD_MULTI_END
#define MULTI_END ANOB_MULTI_END
//#else
//#define MULTI_END	ORTHO_MULTI_END
#else

#define MULTI_START (MEA_START + 20000)
#define BASIC_MULTI_START MULTI_START
#define ABD_MULTI_START BASIC_MULTI_END
#define UR_MULTI_START ABD_MULTI_END
#define ADULT_MULTI_START UR_MULTI_END
#define FETAL_MULTI_START ADULT_MULTI_END
#define OB_MULTI_START FETAL_MULTI_END
#define GYN_MULTI_START OB_MULTI_END
#define SP_MULTI_START GYN_MULTI_END
#define VS_MULTI_START SP_MULTI_END
#define TCD_MULTI_START VS_MULTI_END
#define ORTHO_MULTI_START TCD_MULTI_END
#define MULTI_END	ORTHO_MULTI_END
#endif

/*
 * 本处需注意：此处CALC_START定义必须至少大于上面最大的XXX_MULTI_END:
 * 在计算函数中用枚举号来区别本计算公式用的参数是测量值还是计算值（有一些计算公式是用其他计算结果算出来的）
 * (以后把40000修改成MULTI_END+1,但会挪动本文件很多枚举定义的位置)
 * */

#ifdef VET
#define CALC_START (MULTI_START + 20000)
#define ABD_CALC_START CALC_START 
#define UR_CALC_START ABD_CALC_END
#define ADULT_CALC_START UR_CALC_END
#define FETAL_CALC_START ADULT_CALC_END
#define OB_CALC_START FETAL_CALC_END
#define GYN_CALC_START OB_CALC_END
#define SP_CALC_START GYN_CALC_END
#define VS_CALC_START SP_CALC_END
#define TCD_CALC_START VS_CALC_END
#define ORTHO_CALC_START TCD_CALC_END
/*
#define CALC_END ORTHO_CALC_END
#ifdef VET
#define	OB_CALC_VET_START	ORTHO_CALC_END
#define	TEN_CALC_VET_START	OB_CALC_VET_END
#endif
*/
//添加TD科别 的宏
//hlx 
//#ifdef VET


#define TD_CALC_START ORTHO_CALC_END
//hlx 
#define ANOB_CALC_START TD_CALC_END
//#define CALC_END TD_CALC_END
#define CALC_END ANOB_CALC_END
//#else
//#define CALC_END ORTHO_CALC_END
//#endif

#define CALC_MULTI_START (CALC_START + 20000)
#else
#define CALC_START (MULTI_START + 20000)
#define ABD_CALC_START CALC_START 
#define UR_CALC_START ABD_CALC_END
#define ADULT_CALC_START UR_CALC_END
#define FETAL_CALC_START ADULT_CALC_END
#define OB_CALC_START FETAL_CALC_END
#define GYN_CALC_START OB_CALC_END
#define SP_CALC_START GYN_CALC_END
#define VS_CALC_START SP_CALC_END
#define TCD_CALC_START VS_CALC_END
#define ORTHO_CALC_START TCD_CALC_END
#define CALC_END ORTHO_CALC_END

#define CALC_MULTI_START (CALC_START + 20000)
#endif
enum EMeaType{
	DIST_DOT, DEPTH_DIST, DIST_LINE, LENGTH_TRACK, LENGTH_DOT, 
	PERI_TRACK, PERI_ELLIPSE, 
	INTEGRAL_TRACK, AREA_TRACK, AREA_DOT, AREA_REC, AREA_ELLIPSE,
	VOL_3AXIS, VOL_ELLIPSE1, VOL_ELLIPSE2, VOL_SPHEROID, SIMPSONS, AL, 
	ANGLE_3DOT, ANGLE_2LINE, 
	ANGUSTY_DIST_DOT, 
	RATIO_DIST_DOT, ANGUSTY_AREA, RATIO_AREA, RATIO_D_P, RATIO_VOL, RATIO_ANGLE, HIP, 
	EF, PROFILE, HISTOGRAM, 
	TIME_M, VEL_M, SLOPE, DIST_SLOPE_M, DEPTH_DIST_M, HR_M, 
	VEL_D, PSED, RI, SD, TIME_D, HR_D, 
	ACCEL, SLOPE_D, P12T, PI_D, PGMAX, PGMEAN, MEASURE_TRACK, MEASURE_TRACK_AUTO, SAC_3AXIS, IMT_ABOVE, IMT_BELOW, MEA_TYPE_END

};
#ifdef VET

//添加 TD_M
//hlx 
//添加 ANOB_M
//hlx 
enum ESection{
	SECTION_START, ABDO_M = SECTION_START, ADULT_M, UR_M, ANOB_M, TD_M, SP_M, VS_M, FETAL_M, TCD_M, ORTHO_M,  USER_M, OB_M, GYN_M, SECTION_END
};
#else
#ifdef EMP_322
enum ESection{
	SECTION_START, ABDO_M = SECTION_START, ADULT_M, UR_M, OB_M, GYN_M, SP_M, FETAL_M, ORTHO_M, USER_M,TCD_M, VS_M, SECTION_END
};

#else
enum ESection{
	SECTION_START, ABDO_M = SECTION_START, ADULT_M, UR_M, OB_M, GYN_M, SP_M, VS_M, FETAL_M, TCD_M, ORTHO_M, USER_M, SECTION_END
};
#endif
#endif
enum EMeasureFactory{
	D2_DIST_DOT = BASIC_MEA_START, D2_DIST_LINE, 
	D2_LEN_TRACK, D2_LEN_DOT, 
	D2_AREA_TRACK, D2_AREA_DOT, D2_AREA_ELLIPSE, D2_AREA_RECTANGLE, 
	D2_VOLUME_3DIST, D2_VOLUME_ELLIPSE, D2_VOLUME_ELLIPSE_1DIST, D2_VOLUME_1DIST, 
	D2_ANGLE_DOT, D2_ANGLE_LINE, 
	D2_DEPTH, 
	M_TIME, M_SLOPE, M_VEL, M_HR, M_DEPTH, 
	D_AUTO_TRACK,//自动描迹暂时没用 
	D_MANUAL_TRACK,
	D_VEL, D_RI, D_SD, D_TIME, D_ACCEL, D_PI, D_HR, D_PGMAX, D_PGMEAN,
	D2_ANGUSTY_DIST, D2_RATIO_DIST, D2_ANGUSTY_AREA, D2_RATIO_AREA, D2_RATIO_D_P, D2_RATIO_VOL, D2_RATIO_ANGLE, D2_EF, D2_PROFILE, D2_HISTOGRAM, D2_IMT, D2_IMT_ABOVE,D2_IMT_BELOW,

	BASIC_MEA_END
};

enum EMultiBasic{
	D2_VOLUME_1DIST_MULTI= BASIC_MULTI_START, D_HR_MULTI, D_PGMAX_MULTI, D_RI_MULTI, D_SD_MULTI, D2_RATIO_ANGLE_MULTI, BASIC_MULTI_END
};

enum EMeasureFactoryAbdo{
	//General
	ABD_GALLBLAD_VOL = ABD_MEA_START, ABD_GALLBLAD_L, ABD_GALLBLAD_W, ABD_GALLBLAD_H, 
	ABD_CBD_DIAM, ABD_GB_WALL, ABD_LIVER_L, ABD_SPLEEN_VOL, ABD_SPLEEN_L, ABD_SPLEEN_W, ABD_SPLEEN_H, 
	ABD_PANCREAS_VOL, ABD_PANCREAS_L, ABD_PANCREAS_W, ABD_PANCREAS_H, ABD_AO_DIST_DIAM, ABD_AO_MID_DIAM, ABD_AO_PROX_DIAM,
	//Arterial
	ABD_DIST_AO, ABD_CELIAC_A, ABD_COM_HEP_A, ABD_L_HEP_A, ABD_R_HEP_A, ABD_GDA, ABD_IMA, ABD_SMA, ABD_SPLENIC_A,
	//Venous
	ABD_PROX_IVC, ABD_DIST_IVC, ABD_L_HEP_V, ABD_M_HEP_V, ABD_R_HEP_V, ABD_L_PORT_V, ABD_M_PORT_V, ABD_R_PORT_V, 
	ABD_SPLENIC_V, ABD_IMV, ABD_SMV,

	ABD_MEA_END
};

enum EMultiAbdo{
	ABD_DIST_AO_MULTI = ABD_MULTI_START, ABD_CELIAC_A_MULTI, ABD_COM_HEP_A_MULTI, ABD_L_HEP_A_MULTI, ABD_R_HEP_A_MULTI, ABD_GDA_MULTI, ABD_IMA_MULTI, ABD_SMA_MULTI, ABD_SPLENIC_A_MULTI,ABD_PROX_IVC_MULTI, ABD_DIST_IVC_MULTI, ABD_L_HEP_V_MULTI, ABD_M_HEP_V_MULTI, ABD_R_HEP_V_MULTI, ABD_L_PORT_V_MULTI, ABD_M_PORT_V_MULTI, ABD_R_PORT_V_MULTI, ABD_SPLENIC_V_MULTI, ABD_IMV_MULTI, ABD_SMV_MULTI, ABD_MULTI_END 
};

enum ECalcAbdo{
	ABD_GB_VOL = ABD_CALC_START, ABD_CALC_SPLEEN_VOL, ABD_PANC_VOL, ABD_CALC_END
};
#ifdef EMP_322
enum EMeasureFactoryUR{
	//UR Bladder
	UR_BLADDER_VOL = UR_MEA_START, UR_BLADDER_H, UR_BLADDER_L, UR_BLADDER_W, 
	//UR PV Bladder
	UR_PV_BLADDER_VOL, UR_PV_BLADDER_H, UR_PV_BLADDER_L, UR_PV_BLADDER_W, 
	//UR Prostate
	UR_PROSTATE_VOL, UR_PROSTATE_H, UR_PROSTATE_L, UR_PROSTATE_W,
	//UR Renal Left
	UR_L_KID_VOL, UR_L_KID_H, UR_L_KID_L, UR_L_KID_W,	 
	UR_L_URETER_AP, UR_L_URETER_TR,
	//UR Renal Right 
	UR_R_KID_VOL, UR_R_KID_H, UR_R_KID_L, UR_R_KID_W,	 
	UR_R_URETER_AP, UR_R_URETER_TR,
	UR_MEA_END
};

#else
enum EMeasureFactoryUR{
	//UR Bladder
	UR_BLADDER_VOL = UR_MEA_START, UR_BLADDER_H, UR_BLADDER_L, UR_BLADDER_W, 
	//UR PV Bladder
	UR_PV_BLADDER_VOL, UR_PV_BLADDER_H, UR_PV_BLADDER_L, UR_PV_BLADDER_W, 
	//UR Prostate
	UR_PROSTATE_VOL, UR_PROSTATE_H, UR_PROSTATE_L, UR_PROSTATE_W,
	//UR Renal Left
	UR_L_KID_VOL, UR_L_KID_H, UR_L_KID_L, UR_L_KID_W,	
	UR_L_DIST_REN_A, 
	UR_L_MAIN_REN_A,
	UR_L_REN_V,
	UR_L_URETER_AP, UR_L_URETER_TR,
	//UR Renal Right 
	UR_R_KID_VOL, UR_R_KID_H, UR_R_KID_L, UR_R_KID_W,	
	UR_R_DIST_REN_A, 
	UR_R_MAIN_REN_A, 
	UR_R_REN_V, 
	UR_R_URETER_AP, UR_R_URETER_TR,
	UR_MEA_END
};
#endif
enum EMultiUR{
	UR_L_DIST_REN_A_MULTI = UR_MULTI_START, UR_L_MAIN_REN_A_MULTI, UR_L_REN_V_MULTI, UR_R_DIST_REN_A_MULTI, UR_R_MAIN_REN_A_MULTI, UR_R_REN_V_MULTI, UR_MULTI_END
};

enum ECalcUR{
	UR_CALC_BLADDER_VOL = UR_CALC_START, UR_CALC_PV_BLADDER_VOL, UR_CALC_PROSTATE_VOL, UR_CALC_L_KID_VOL, UR_CALC_R_KID_VOL, UR_CALC_END
};

enum EMeasureFactoryAdult{
	//2D Dimensions
	ADULT_LVLD_APICAL = ADULT_MEA_START, 
	ADULT_LVIDS, ADULT_LVPWS, ADULT_LVOT_DIAM, ADULT_LVIDD, ADULT_LVPWD, ADULT_LVAD_ENDO, ADULT_LVAD_EPI, 
	ADULT_RVIDD, ADULT_RVAWD, ADULT_RVOT_DIAM, ADULT_IVSD, ADULT_IVSS, ADULT_LA_DIMEN,
	//2D Vessels
	ADULT_AOR_DIAM, ADULT_ISTHMUS_DIAM, ADULT_ASC_AO_DIAM, ADULT_DESC_AO_DIAM, 
	ADULT_MPA_DIAM, ADULT_LPA_DIAM, ADULT_RPA_DIAM, 
	//2D EF & Volume
	ADULT_A2CD, ADULT_A2CS, ADULT_A4CD, ADULT_A4CS, 
	ADULT_LVDAL, 
	ADULT_LVSAL,  
	//2D Valves
	ADULT_AV_AREA, ADULT_AI_RADIUS, ADULT_MV_DIAM, ADULT_MV_RADIUS, 
	ADULT_MV_AREA, ADULT_MR_RADIUS, ADULT_TV_DIAM, ADULT_TV_RADIUS,
	//M Dimensions
	ADULT_RVAWD_MM, ADULT_RVIDD_MM, ADULT_IVSD_MM, ADULT_LVIDD_MM, ADULT_LVPWD_MM, ADULT_IVSS_MM, ADULT_LVIDS_MM, 
	ADULT_LVPWS_MM, ADULT_HR_LV, ADULT_LVOT_DIAM_MM, ADULT_AOR_DIAM_MM, ADULT_LA_DIMEN_MM,
	//M Aortic Valve
	ADULT_LV_ET, ADULT_LV_PEP, ADULT_AV_CUSP_SEP,
	//M Mitral Valve
	ADULT_MV_DE_EXC, ADULT_MV_DE_SLOPE, ADULT_MV_EF_SEP, ADULT_MV_EF_SLOPE, ADULT_MV_EPSS, ADULT_MV_AC_INTERVAL,
	//M Tricuspid Valve
	ADULT_TV_DE_EXC, ADULT_TV_DE_SLOPE, ADULT_TV_EF_SLOPE, ADULT_TV_AC_INTERVAL,
	//M Pulmonic Valve
	ADULT_LATE_DIAS_SLOPE, ADULT_A_WAVE_AMP, ADULT_BC_SLOPE, ADULT_RV_ET, ADULT_RV_PEP,
	//D Aortic Valve
	ADULT_AV_ACC_T, ADULT_AV_DEC_T, ADULT_AV_VMAX, ADULT_LVOT_ACC_T, ADULT_LVOT_VMAX, ADULT_AI_ACC_T, 
	ADULT_AI_P12T, ADULT_AI_DEC_SLOPE, ADULT_AI_VMAX, ADULT_AI_END_DIAS_V,ADULT_VTI, ADULT_HR_AV,
	//D Mitral Valve
	ADULT_HR_MV, ADULT_MV_P12T, ADULT_MV_PEAK_E_V, ADULT_MV_PEAK_A_V, ADULT_MV_A_DUR, ADULT_IVRT, 
	ADULT_MV_DEC_T, ADULT_MV_DEC_SLOPE, ADULT_IVCT, ADULT_MV_ACC_T, ADULT_MV_VMAX, ADULT_MR_VMAX, 
	//D Tricuspid Valve
	ADULT_HR_TV, ADULT_TV_VMAX, ADULT_TR_VMAX, ADULT_TV_ACC_T, ADULT_TV_PEAK_E_V, ADULT_TV_PEAK_A_V, 
	//D Pulmonic Valve
	ADULT_HR_PV, ADULT_PV_VMAX, ADULT_PV_ACC_T, ADULT_PI_END_DIAS_V, 
	ADULT_PULM_DIAS_V, ADULT_PULM_SYS_V, ADULT_RVOT_VMAX,
	ADULT_MEA_END	
};

enum EMultiAdult{
	ADULT_A2CD_MULTI = ADULT_MULTI_START, ADULT_A2CS_MULTI, ADULT_A4CD_MULTI, ADULT_A4CS_MULTI, 
	ADULT_LVDAL_MULTI, ADULT_LVSAL_MULTI, 
	ADULT_MV_DE_EXC_MULTI, ADULT_TV_DE_EXC_MULTI, ADULT_AV_VMAX_MULTI, ADULT_LVOT_VMAX_MULTI, ADULT_AI_P12T_MULTI, ADULT_AI_VMAX_MULTI, ADULT_AI_END_DIAS_V_MULTI, ADULT_HR_AV_MULTI, ADULT_HR_MV_MULTI, ADULT_MV_P12T_MULTI, ADULT_MV_PEAK_E_V_MULTI, ADULT_MV_PEAK_A_V_MULTI, ADULT_HR_TV_MULTI, ADULT_TV_PEAK_E_V_MULTI, ADULT_TV_PEAK_A_V_MULTI, ADULT_HR_PV_MULTI, ADULT_PV_VMAX_MULTI, ADULT_PI_END_DIAS_V_MULTI, ADULT_PULM_DIAS_V_MULTI, ADULT_PULM_SYS_V_MULTI, ADULT_RVOT_VMAX_MULTI, 
	ADULT_MULTI_END
};

enum ECalcAdult{
	ADULT_EDV_2DCUBED = ADULT_CALC_START, ADULT_EDV_2DTEICH, ADULT_EDV_MMCUBED, ADULT_EDV_MMTEICH, ADULT_ESV_2DCUBED, ADULT_ESV_2DTEICH, ADULT_ESV_MMCUBED, ADULT_ESV_MMTEICH, ADULT_SV_2DCUBED, ADULT_SV_2DTEICH, ADULT_SV_MMCUBED,ADULT_SV_MMTEICH, ADULT_SV_A2C, ADULT_SV_A4C, ADULT_SV_AL, ADULT_SI_2DCUBED, ADULT_SI_2DTEICH, ADULT_SI_MMCUBED, ADULT_SI_MMTEICH, ADULT_SI_A2C, ADULT_SI_A4C, ADULT_SI_AL, ADULT_CO_2DCUBED, ADULT_CO_2DTEICH, ADULT_CO_MMCUBED, ADULT_CO_MMTEICH, ADULT_CO_A2C, ADULT_CO_A4C, ADULT_CO_AL, ADULT_CI_2DCUBED, ADULT_CI_2DTEICH, ADULT_CI_MMCUBED, ADULT_CI_MMTEICH, ADULT_CI_A2C, ADULT_CI_A4C, ADULT_CI_AL, ADULT_EF_2DCUBED, ADULT_EF_2DTEICH, ADULT_EF_MMCUBED, ADULT_EF_MMTEICH, ADULT_EF_A2C, ADULT_EF_A4C, ADULT_EF_AL, ADULT_FS, ADULT_FS_MM, ADULT_IVS_PER, ADULT_IVS_PER_MM, ADULT_IVS_LVPW_RATIO, ADULT_IVS_LVPW_RATIO_MM, ADULT_LA_AO_RATIO, ADULT_LA_AO_RATIO_MM, ADULT_LVMASS,ADULT_LVMASS_INDEX,ADULT_LVOT_AREA, ADULT_RVOT_AREA, ADULT_TV_AREA, ADULT_AI_PISA, ADULT_MV_PISA, ADULT_MR_PISA, ADULT_TV_PISA, ADULT_AVA_VMAX, ADULT_PVA_VMAX, ADULT_MVA_P12T, ADULT_MV_EA_RATIO, ADULT_TV_EA_RATIO, ADULT_LVPW_PER, ADULT_LVPW_PER_MM, ADULT_LV_PEP_ET_RATIO, ADULT_RV_PEP_ET_RATIO, ADULT_PULM_SD_RATIO, ADULT_TEI_INDEX, ADULT_CALC_END
};

enum EMeasureFactoryFetal{
	//Fetal 2D Dimen
	FETAL_RVAWD = FETAL_MEA_START, FETAL_RVIDD, FETAL_IVSD, FETAL_LVIDD, FETAL_LVPWD, FETAL_IVSS, FETAL_LVIDS, FETAL_LVPWS, FETAL_LV_L, FETAL_LV_W, FETAL_LV_WALL_W, FETAL_IVS_W, FETAL_RV_L, FETAL_RV_W, FETAL_RV_WALL_W, FETAL_LA_L, FETAL_LA_W, FETAL_LA_DIMEN, FETAL_RA_L, FETAL_RA_W, FETAL_RPA_DIAM_DIM, FETAL_LVOT_DIAM, FETAL_RVOT_DIAM, FETAL_HEART_AREA, FETAL_HEART_CIRC, FETAL_THORAX_CIRC, 
	//Fetal 2D Vessels
    FETAL_AOR_DIAM, FETAL_ASC_AO_DIAM, FETAL_AO_ARCH_DIAM, FETAL_AO_ISTHMUS_DIAM, FETAL_DESC_AO_DIAM,FETAL_DUCT_ART_DIAM, FETAL_MPA_DIAM, FETAL_RPA_DIAM_VES, FETAL_LPA_DIAM, FETAL_SVC_DIAM, FETAL_IVC_DIAM, 
	//Fetal 2D Valves
    FETAL_AO_AN_DIAM, FETAL_AO_AN_CIRC, FETAL_MV_AN_DIAM, FETAL_MV_AN_CIRC, FETAL_PV_AN_DIAM, FETAL_TV_AN_DIAM, 
	//Fetal M Dimen
    FETAL_RVAWD_MM, FETAL_RVIDD_MM, FETAL_IVSD_MM, FETAL_LVIDD_MM, FETAL_LVPWD_MM, FETAL_IVSS_MM, FETAL_LVIDS_MM, FETAL_LVPWS_MM, FETAL_HR_LV_MM, FETAL_LA_DIMEN_MM, FETAL_LA_WALL_DIAM_MM, FETAL_RA_WALL_DIAM_MM, 
	//Fetal M Vessels
    FETAL_AOR_DIAM_MM, FETAL_ASC_AO_DIAM_MM, FETAL_AO_ARCH_DIAM_MM, FETAL_AO_ISTHMUS_DIAM_MM, FETAL_DESC_AO_DIAM_MM, FETAL_DUCT_ART_DIAM_MM, FETAL_LPA_DIAM_MM, FETAL_MPA_DIAM_MM, FETAL_RPA_DIAM_MM, 
	//Fetal M AV and MV
    FETAL_LV_ET_MM, FETAL_LV_PEP_MM, FETAL_AV_CUSP_SEP_MM, FETAL_HR_AV_MM, FETAL_MV_DE_EXC_MM, FETAL_MV_DE_SLOPE_MM, FETAL_MV_EF_SLOPE_MM, FETAL_MV_EF_SEP_MM, FETAL_MV_EPSS_MM, FETAL_MV_AC_INTERVAL_MM, 
	//Fetal M PV and TV
    FETAL_LATE_DIAS_SLOPE_MM, FETAL_A_WAVE_AMP_MM, FETAL_BC_SLOPE_MM, FETAL_RV_ET_MM, FETAL_RV_PEP_MM, FETAL_HR_PV_MM, FETAL_TV_DE_EXC_MM, FETAL_TV_DE_SLOPE_MM, FETAL_TV_EF_SLOPE_MM, FETAL_TV_AC_INTERVAL_MM, 
	//Fetal D Utero and Placenta
    FETAL_PLACENTA, FETAL_UM_A, FETAL_UM_V, FETAL_L_UT_A, FETAL_R_UT_A, FETAL_L_OV_A, FETAL_R_OV_A, 
	//Fetal D Vessels
    FETAL_FROAMEN_OVALE, FETAL_DUCT_ART, FETAL_L_COR_A, FETAL_R_COR_A, FETAL_AOR, FETAL_ASC_AO, FETAL_AO_ARCH, FETAL_AO_ISTHMUS, FETAL_DESC_AO, FETAL_MPA, FETAL_LPA, FETAL_RPA, FETAL_PULM_V, FETAL_DUCT_VEN, 
	//Fetal D AV and MV
    FETAL_LVOT_ACC_TIME, FETAL_LVOT_VMAX, FETAL_AV_ACC_TIME, FETAL_AV_VMAX, FETAL_AI_ACC_TIME, FETAL_AI_END_DIAS_VEL, FETAL_AI_VMAX, FETAL_HR_AV, FETAL_HR_MV, FETAL_MV_PEAK_E, FETAL_MV_PEAK_A, FETAL_MV_ACC_TIME, FETAL_MV_DEC_TIME, FETAL_MV_VMAX, FETAL_MR_VMAX, 
	//Fetal D PV and TV
    FETAL_RVOT_ACC_TIME, FETAL_RVOT_VMAX, FETAL_PV_ACC_TIME, FETAL_PV_VMAX, FETAL_HR_PV, FETAL_TV_PEAK_A, FETAL_TV_PEAK_E, FETAL_TV_ACC_TIME, FETAL_TV_DEC_TIME, FETAL_TV_VMAX, FETAL_TR_VMAX, FETAL_HR_TV, 
	//Fetal D Peripheral Vasc
    FETAL_THORACIC_AO, FETAL_L_RENAL_A, FETAL_R_RENAL_A, FETAL_HEPATIC_A, FETAL_HEPATIC_V, FETAL_SPLENIC_A, FETAL_L_MCA, FETAL_R_MCA, FETAL_L_ICA, FETAL_R_ICA, FETAL_SVC, FETAL_IVC, 

	FETAL_MEA_END
};

enum EMultiFetal{
	FETAL_TV_DE_EXC_MULTI = FETAL_MULTI_START, FETAL_PLACENTA_MULTI, FETAL_UM_A_MULTI, FETAL_L_UT_A_MULTI, FETAL_R_UT_A_MULTI, FETAL_L_OV_A_MULTI, FETAL_R_OV_A_MULTI, FETAL_FROAMEN_OVALE_MULTI, FETAL_DUCT_ART_MULTI, FETAL_L_COR_A_MULTI, FETAL_R_COR_A_MULTI, FETAL_AOR_MULTI, FETAL_ASC_AO_MULTI, FETAL_AO_ARCH_MULTI, FETAL_AO_ISTHMUS_MULTI, FETAL_DESC_AO_MULTI, FETAL_MPA_MULTI, FETAL_LPA_MULTI, FETAL_RPA_MULTI, //FETAL_PULM_V_MULTI,
FETAL_DUCT_VEN_MULTI,FETAL_LVOT_VMAX_MULTI, FETAL_AV_VMAX_MULTI, FETAL_AI_END_DIAS_VEL_MULTI, FETAL_AI_VMAX_MULTI,FETAL_HR_AV_MULTI, FETAL_HR_MV_MULTI, FETAL_MV_VMAX_MULTI, FETAL_MR_VMAX_MULTI, FETAL_RVOT_VMAX_MULTI, FETAL_PV_VMAX_MULTI, FETAL_HR_PV_MULTI, FETAL_TV_VMAX_MULTI, FETAL_TR_VMAX_MULTI, FETAL_HR_TV_MULTI,  FETAL_THORACIC_AO_MULTI, FETAL_L_RENAL_A_MULTI, FETAL_R_RENAL_A_MULTI, FETAL_HEPATIC_A_MULTI, FETAL_HEPATIC_V_MULTI, FETAL_SPLENIC_A_MULTI, FETAL_L_MCA_MULTI, FETAL_R_MCA_MULTI, FETAL_L_ICA_MULTI, FETAL_R_ICA_MULTI, FETAL_SVC_MULTI, FETAL_IVC_MULTI, FETAL_MULTI_END
};

enum ECalcFetal{
	FETAL_AO_PA_RATIO = FETAL_CALC_START, FETAL_CO_2DTEICH, FETAL_CO_MMTEICH, FETAL_EDV_2DTEICH, FETAL_EDV_MMTEICH, FETAL_ESV_2DTEICH, FETAL_ESV_MMTEICH, FETAL_EF_2DTEICH, FETAL_EF_MMTEICH, FETAL_FS_2DTEICH, FETAL_FS_MMTEICH, FETAL_HRTC_THRC_RATIO, FETAL_IVS_PER, FETAL_IVS_PER_MM, FETAL_IVS_LVPW_RATIO, FETAL_LA_AO_RATIO, FETAL_LA_AO_RATIO_MM, FETAL_LA_RA_RATIO, FETAL_LV_MASS, FETAL_LV_PEP_ET_RATIO, FETAL_LV_RV_RATIO, FETAL_LVETC, FETAL_LVOT_AREA, FETAL_LVPEPC, FETAL_LVPW_PER, FETAL_LVPW_PER_MM, FETAL_IVS_LVPW_MM, FETAL_MEAN_VCF, FETAL_MEAN_VCFC, FETAL_RV_PEP_ET_RATIO,  FETAL_RVOT_AREA, FETAL_RVPEPC, FETAL_SV_2DTEICH, FETAL_SV_MMTEICH, FETAL_MV_EA_RATIO, FETAL_TV_EA_RATIO, FETAL_CALC_END
};

#ifdef EMP_322
enum EMeasureFactoryOB{
	//OB Advanced
	OB_CER = OB_MEA_START, OB_CIST_MAG, OB_OOD, OB_TIBIA, OB_TTD,
	//OB_HUMERUS, 
	OB_IOD, OB_RADIUS, OB_ULNA, OB_FIBULA, OB_NUCHFOLD,  
	//OB AFI&BPP
    OB_AFI, OB_AFI_LUQ, OB_AFI_LLQ, OB_AFI_RUQ, OB_AFI_RLQ,  
	//OB Early
	OB_CRL, OB_NT, OB_CERV,/*OB_SAC1, OB_SAC2, OB_SAC3,*/ OB_SAC, OB_YOLK_SAC, 
	OB_L_OV_VOL, OB_L_OV_H, OB_L_OV_L, OB_L_OV_W, 
	OB_R_OV_VOL, OB_R_OV_H, OB_R_OV_L, OB_R_OV_W, 
	//OB Fetal Heart
    OB_RA_DIMEN, OB_RA_LEN, OB_RA_WIDTH, OB_RV_DIMEN, OB_RV_LEN, OB_RV_WIDTH, OB_RVOT, OB_IVS_2D, 
	OB_LA_DIMEN, OB_LA_LEN, OB_LA_WIDTH, OB_LV_DIMEN, OB_LV_LEN, OB_LV_WIDTH, OB_LVOT_DIAM, OB_HA_2D, 
	OB_HRTC_2D, OB_HR, OB_THC, OB_AOR_DIAM, OB_AO_ANNUL, OB_ASC_AO_DIAM,//两个的
	OB_DESC_AO_DIAM, 
	OB_DUCT_ART_DIAM, OB_DUCT_VEN, OB_MV_ANNUL_DIAM, OB_TV_ANNUL_DIAM, OB_MPA_DIAM, 
	//OB General
    OB_GS, OB_BPD, OB_AC, OB_HC,OB_HL,OB_FL,OB_TAD, OB_APAD, OB_THD, OB_OFD, OB_FTA, 
	//OB Other
    OB_EAR, OB_ORIBIT1, OB_ORIBIT2, OB_POST_FOSSA, OB_MANDIBLE, OB_NASAL, OB_CLAVICLE, OB_M_PHALANX5, 
	OB_L_FOOT_L, OB_L_FOOT_A, OB_R_FOOT_L, OB_R_FOOT_A, OB_BLADDER_AP, OB_BLADDER_L, OB_BLADDER_TR, OB_L_RENAL_AP, 
	OB_L_RENAL_L, OB_L_RENAL_TR, OB_L_RENAL_PELVIS, OB_R_RENAL_AP, OB_R_RENAL_L, OB_R_RENAL_TR, OB_R_RENAL_PELVIS, OB_ADR_GLAND_AP, 
	OB_ADR_GLAND_L, OB_ADR_GLAND_TR, OB_URETER_AP, OB_URETER_TR, OB_L_LUNG_DIAM, OB_R_LUNG_DIAM, 
	OB_PELVIS_AP, OB_PELVIS_L, OB_PELVIS_TR, OB_SCAPULA, 

	OB_MEA_END
};

#else
enum EMeasureFactoryOB{
	//OB Advanced
	OB_CER = OB_MEA_START, OB_CIST_MAG, OB_OOD, OB_TIBIA, OB_TTD,
	//OB_HUMERUS, 
	OB_IOD, OB_RADIUS, OB_ULNA, OB_FIBULA, OB_NUCHFOLD, OB_UMBILICAL_A, OB_L_MCA, OB_R_MCA, 
	//OB AFI&BPP
    OB_AFI, OB_AFI_LUQ, OB_AFI_LLQ, OB_AFI_RUQ, OB_AFI_RLQ,  
	//OB Early
	OB_CRL, OB_NT, OB_CERV, /*OB_SAC1, OB_SAC2, OB_SAC3,*/ OB_SAC, OB_YOLK_SAC, 
	OB_L_OV_VOL, OB_L_OV_H, OB_L_OV_L, OB_L_OV_W, 
	OB_R_OV_VOL, OB_R_OV_H, OB_R_OV_L, OB_R_OV_W, 
	//OB Fetal Heart
    OB_RA_DIMEN, OB_RA_LEN, OB_RA_WIDTH, OB_RV_DIMEN, OB_RV_LEN, OB_RV_WIDTH, OB_RVOT, OB_IVS_2D, 
	OB_LA_DIMEN, OB_LA_LEN, OB_LA_WIDTH, OB_LV_DIMEN, OB_LV_LEN, OB_LV_WIDTH, OB_LVOT_DIAM, OB_HA_2D, 
	OB_HRTC_2D, OB_HR, OB_THC, OB_AOR_DIAM, OB_AO_ANNUL, OB_ASC_AO_DIAM, OB_DESC_AO,//两个的
	OB_DESC_AO_DIAM, 
	OB_DUCT_ART_DIAM, OB_DUCT_VEN, OB_MV_ANNUL_DIAM, OB_TV_ANNUL_DIAM, OB_MPA_DIAM, OB_THORACIC_AO, 
	//OB General
    OB_GS, OB_BPD, OB_AC, OB_HC,OB_HL,OB_FL,OB_TAD, OB_APAD, OB_THD, OB_OFD, OB_FTA, 
	//OB Other
    OB_EAR, OB_ORIBIT1, OB_ORIBIT2, OB_POST_FOSSA, OB_MANDIBLE, OB_NASAL, OB_CLAVICLE, OB_M_PHALANX5, 
	OB_L_FOOT_L, OB_L_FOOT_A, OB_R_FOOT_L, OB_R_FOOT_A, OB_BLADDER_AP, OB_BLADDER_L, OB_BLADDER_TR, OB_L_RENAL_AP, 
	OB_L_RENAL_L, OB_L_RENAL_TR, OB_L_RENAL_PELVIS, OB_R_RENAL_AP, OB_R_RENAL_L, OB_R_RENAL_TR, OB_R_RENAL_PELVIS, OB_ADR_GLAND_AP, 
	OB_ADR_GLAND_L, OB_ADR_GLAND_TR, OB_URETER_AP, OB_URETER_TR, OB_L_LUNG_DIAM, OB_R_LUNG_DIAM, OB_L_UTERINE_A, OB_R_UTERINE_A, 
	OB_PELVIS_AP, OB_PELVIS_L, OB_PELVIS_TR, OB_SCAPULA, 

	OB_MEA_END
};
#endif

#ifdef EMP_322
enum EMultiOB{
	OB_SAC_MULTI = OB_MULTI_START,  OB_MULTI_END
};

#else
enum EMultiOB{
	OB_DESC_AO_MULTI = OB_MULTI_START, OB_L_MCA_MULTI, OB_R_MCA_MULTI, OB_L_UTERINE_A_MULTI, OB_R_UTERINE_A_MULTI, OB_THORACIC_AO_MULTI, OB_UMBILICAL_A_MULTI, OB_SAC_MULTI, OB_MULTI_END
};
#endif
enum ECalcOB{
	OB_CER_GW = OB_CALC_START, OB_CER_EDCB, OB_HL_GW, OB_HL_EDCB, OB_BPD_GW, OB_BPD_EDCB, OB_FL_GW, OB_FL_EDCB, OB_OOD_GW, OB_OOD_EDCB, OB_TIBIA_GW, OB_TIBIA_EDCB, OB_TTD_GW, OB_TTD_EDCB, OB_ULNA_GW, OB_ULNA_EDCB, OB_CRL_GW, OB_CRL_EDCB, OB_GS_GW, OB_GS_EDCB, OB_AC_GW, OB_AC_EDCB, OB_HC_GW, OB_HC_EDCB, OB_TAD_GW, OB_TAD_EDCB, OB_APAD_GW, OB_APAD_EDCB, OB_THD_GW, OB_THD_EDCB, OB_OFD_GW, OB_OFD_EDCB, OB_EFW, OB_EFW_HADLOCK1 = OB_EFW, OB_EFW_HADLOCK2, OB_EFW_HADLOCK3, OB_EFW_HADLOCK4, OB_EFW_SHEPARD, OB_EFW_HANSMAN, OB_EFW_TOKYO, OB_CALC_AFI, OB_CALC_L_OV_VOL, OB_CALC_R_OV_VOL, /*OB_MEAN_SAC,*/ OB_AO_PA_RATIO, OB_HRTC_THRC_RATIO, OB_LA_AO_RTAIO, OB_LA_RA_RATIO, OB_LV_RV_RATIO, OB_HC_AC_RATIO, OB_FL_BPD_RATIO, OB_FL_AC_RATIO, OB_BPDA, OB_CI, OB_FTA_GW, OB_FTA_EDCB, OB_CALC_END
};//OB_FTA_GW, OB_FTA_EDCB, 

#ifdef EMP_322
enum EMeasureFactoryGYN{
	//GYN General
	GYN_BLADDER_VOL = GYN_MEA_START, GYN_BLADDER_H, GYN_BLADDER_L, GYN_BLADDER_W, 
	GYN_PV_BLADDER_VOL, GYN_PV_BLADDER_H, GYN_PV_BLADDER_L, GYN_PV_BLADDER_W, 
	GYN_L_OV_VOL, GYN_L_OV_HEIGHT, GYN_L_OV_LENGTH, GYN_L_OV_WIDTH, 
	GYN_R_OV_VOL, GYN_R_OV_HEIGHT, GYN_R_OV_LENGTH, GYN_R_OV_WIDTH, 
	GYN_CERV_LENGTH, GYN_ENDO_THICK, 
	GYN_UTERUS_VOL, GYN_UTERUS_HEIGHT, GYN_UTERUS_LENGTH, GYN_UTERUS_WIDTH,
	GYN_L_UTERINE_A_DIAM, 
	GYN_R_UTERINE_A_DIAM, 
	GYN_FHR,
	//GYN Fertility
	GYN_L_FOLL1, GYN_L_FOLL2, GYN_L_FOLL3, GYN_L_FOLL4, GYN_L_FOLL5, 
	GYN_L_FOLL6, GYN_L_FOLL7, GYN_L_FOLL8, GYN_L_FOLL9, GYN_L_FOLL10,
	GYN_R_FOLL1, GYN_R_FOLL2, GYN_R_FOLL3, GYN_R_FOLL4, GYN_R_FOLL5, 
	GYN_R_FOLL6, GYN_R_FOLL7, GYN_R_FOLL8, GYN_R_FOLL9, GYN_R_FOLL10,
	//GYN Fibroid
	GYN_FIBROID1, GYN_FIBROID2, GYN_FIBROID3, GYN_FIBROID4, GYN_FIBROID5, 
	GYN_FIBROID6, GYN_FIBROID7, GYN_FIBROID8, GYN_FIBROID9, GYN_FIBROID10,
	
	GYN_MEA_END
};
#else
enum EMeasureFactoryGYN{
	//GYN General
	GYN_BLADDER_VOL = GYN_MEA_START, GYN_BLADDER_H, GYN_BLADDER_L, GYN_BLADDER_W, 
	GYN_PV_BLADDER_VOL, GYN_PV_BLADDER_H, GYN_PV_BLADDER_L, GYN_PV_BLADDER_W, 
	GYN_L_OV_VOL, GYN_L_OV_HEIGHT, GYN_L_OV_LENGTH, GYN_L_OV_WIDTH, 
	GYN_L_OVARIAN_A, 
	GYN_R_OV_VOL, GYN_R_OV_HEIGHT, GYN_R_OV_LENGTH, GYN_R_OV_WIDTH, 
	GYN_R_OVARIAN_A, 
	GYN_CERV_LENGTH, GYN_ENDO_THICK, 
	GYN_UTERUS_VOL, GYN_UTERUS_HEIGHT, GYN_UTERUS_LENGTH, GYN_UTERUS_WIDTH,
	GYN_L_UTERINE_A_DIAM, 
	GYN_L_UTERINE_A,
	GYN_R_UTERINE_A_DIAM, 
	GYN_R_UTERINE_A,
	GYN_FHR,
	//GYN Fertility
	GYN_L_FOLL1, GYN_L_FOLL2, GYN_L_FOLL3, GYN_L_FOLL4, GYN_L_FOLL5, 
	GYN_L_FOLL6, GYN_L_FOLL7, GYN_L_FOLL8, GYN_L_FOLL9, GYN_L_FOLL10,
	GYN_R_FOLL1, GYN_R_FOLL2, GYN_R_FOLL3, GYN_R_FOLL4, GYN_R_FOLL5, 
	GYN_R_FOLL6, GYN_R_FOLL7, GYN_R_FOLL8, GYN_R_FOLL9, GYN_R_FOLL10,
	//GYN Fibroid
	GYN_FIBROID1, GYN_FIBROID2, GYN_FIBROID3, GYN_FIBROID4, GYN_FIBROID5, 
	GYN_FIBROID6, GYN_FIBROID7, GYN_FIBROID8, GYN_FIBROID9, GYN_FIBROID10,
	
	GYN_MEA_END
};

#endif
enum EMultiGYN{
	GYN_L_OVARIAN_A_MULTI = GYN_MULTI_START, GYN_R_OVARIAN_A_MULTI, GYN_L_UTERINE_A_MULTI, GYN_R_UTERINE_A_MULTI, GYN_MULTI_END
};
enum ECalcGYN{
	GYN_CALC_BLADDER_VOL = GYN_CALC_START, GYN_CALC_PV_BLADDER_VOL, GYN_CALC_L_OV_VOL, GYN_CALC_R_OV_VOL, GYN_CALC_UTERUS_VOL, GYN_L_FOLL1_VOL, GYN_L_FOLL2_VOL, GYN_L_FOLL3_VOL, GYN_L_FOLL4_VOL, GYN_L_FOLL5_VOL, GYN_L_FOLL6_VOL, GYN_L_FOLL7_VOL, GYN_L_FOLL8_VOL, GYN_L_FOLL9_VOL, GYN_L_FOLL10_VOL, GYN_R_FOLL1_VOL, GYN_R_FOLL2_VOL, GYN_R_FOLL3_VOL, GYN_R_FOLL4_VOL, GYN_R_FOLL5_VOL, GYN_R_FOLL6_VOL, GYN_R_FOLL7_VOL, GYN_R_FOLL8_VOL, GYN_R_FOLL9_VOL, GYN_R_FOLL10_VOL, 
	GYN_CALC_END
};

#ifdef EMP_322
enum EMeasureFactorySP{
	//SP Breast
	SP_L_GALACT_THICK = SP_MEA_START, 
	SP_R_GALACT_THICK,
	SP_BRE_L_LESION1_VOL, SP_BRE_L_LESION1_L, SP_BRE_L_LESION1_W, SP_BRE_L_LESION1_H, 
	SP_BRE_L_LESION2_VOL, SP_BRE_L_LESION2_L, SP_BRE_L_LESION2_W, SP_BRE_L_LESION2_H, 
	SP_BRE_L_LESION3_VOL, SP_BRE_L_LESION3_L, SP_BRE_L_LESION3_W, SP_BRE_L_LESION3_H, 
	SP_BRE_L_LESION4_VOL, SP_BRE_L_LESION4_L, SP_BRE_L_LESION4_W, SP_BRE_L_LESION4_H, 
	SP_BRE_L_LESION5_VOL, SP_BRE_L_LESION5_L, SP_BRE_L_LESION5_W, SP_BRE_L_LESION5_H,
    SP_BRE_R_LESION1_VOL, SP_BRE_R_LESION1_L, SP_BRE_R_LESION1_W, SP_BRE_R_LESION1_H, 
	SP_BRE_R_LESION2_VOL, SP_BRE_R_LESION2_L, SP_BRE_R_LESION2_W, SP_BRE_R_LESION2_H, 
	SP_BRE_R_LESION3_VOL, SP_BRE_R_LESION3_L, SP_BRE_R_LESION3_W, SP_BRE_R_LESION3_H, 
	SP_BRE_R_LESION4_VOL, SP_BRE_R_LESION4_L, SP_BRE_R_LESION4_W, SP_BRE_R_LESION4_H, 
	SP_BRE_R_LESION5_VOL, SP_BRE_R_LESION5_L, SP_BRE_R_LESION5_W, SP_BRE_R_LESION5_H,
	//SP Testicle
	SP_L_TESTIS_VOL, SP_L_TESTIS_L, SP_L_TESTIS_W, SP_L_TESTIS_H,  
	SP_R_TESTIS_VOL, SP_R_TESTIS_L, SP_R_TESTIS_W, SP_R_TESTIS_H,
	SP_TES_L_LESION1_VOL, SP_TES_L_LESION1_L, SP_TES_L_LESION1_W, SP_TES_L_LESION1_H, 
	SP_TES_L_LESION2_VOL, SP_TES_L_LESION2_L, SP_TES_L_LESION2_W, SP_TES_L_LESION2_H, 
	SP_TES_L_LESION3_VOL, SP_TES_L_LESION3_L, SP_TES_L_LESION3_W, SP_TES_L_LESION3_H, 
	SP_TES_L_LESION4_VOL, SP_TES_L_LESION4_L, SP_TES_L_LESION4_W, SP_TES_L_LESION4_H, 
	SP_TES_L_LESION5_VOL, SP_TES_L_LESION5_L, SP_TES_L_LESION5_W, SP_TES_L_LESION5_H,  
	SP_TES_R_LESION1_VOL, SP_TES_R_LESION1_L, SP_TES_R_LESION1_W, SP_TES_R_LESION1_H, 
	SP_TES_R_LESION2_VOL, SP_TES_R_LESION2_L, SP_TES_R_LESION2_W, SP_TES_R_LESION2_H, 
	SP_TES_R_LESION3_VOL, SP_TES_R_LESION3_L, SP_TES_R_LESION3_W, SP_TES_R_LESION3_H, 
	SP_TES_R_LESION4_VOL, SP_TES_R_LESION4_L, SP_TES_R_LESION4_W, SP_TES_R_LESION4_H, 
	SP_TES_R_LESION5_VOL, SP_TES_R_LESION5_L, SP_TES_R_LESION5_W, SP_TES_R_LESION5_H,  
	//SP THyroid
	SP_ISTHMUS_AP, SP_LONG_L_LOBE, SP_AP_L_LOBE, SP_TR_L_LOBE, SP_LONG_R_LOBE, SP_AP_R_LOBE, SP_TR_R_LOBE,
	SP_THY_LESION1_VOL, SP_THY_LESION1_L, SP_THY_LESION1_W, SP_THY_LESION1_H, 
	SP_THY_LESION2_VOL, SP_THY_LESION2_L, SP_THY_LESION2_W, SP_THY_LESION2_H,
	SP_THY_LESION3_VOL, SP_THY_LESION3_L, SP_THY_LESION3_W, SP_THY_LESION3_H, 
	SP_THY_LESION4_VOL, SP_THY_LESION4_L, SP_THY_LESION4_W, SP_THY_LESION4_H, 
	SP_THY_LESION5_VOL, SP_THY_LESION5_L, SP_THY_LESION5_W, SP_THY_LESION5_H, 
	//SP Eye
	SP_L_EYE_OA, SP_L_EYE_LENS, SP_L_EYE_AC, SP_L_EYE_ON,
	SP_R_EYE_OA, SP_R_EYE_LENS, SP_R_EYE_AC, SP_R_EYE_ON,

	SP_MEA_END
};
#else
#ifdef VET
enum EMeasureFactorySP{
	//SP Breast
	SP_GALACT1_THICK = SP_MEA_START, 
	SP_GALACT2_THICK, SP_GALACT3_THICK, SP_GALACT4_THICK, SP_GALACT5_THICK,
	SP_BRE1_LESION1_VOL, SP_BRE1_LESION1_L, SP_BRE1_LESION1_W, SP_BRE1_LESION1_H, 
	SP_BRE1_LESION2_VOL, SP_BRE1_LESION2_L, SP_BRE1_LESION2_W, SP_BRE1_LESION2_H, 
	SP_BRE1_LESION3_VOL, SP_BRE1_LESION3_L, SP_BRE1_LESION3_W, SP_BRE1_LESION3_H, 
	SP_BRE1_LESION4_VOL, SP_BRE1_LESION4_L, SP_BRE1_LESION4_W, SP_BRE1_LESION4_H, 
	SP_BRE1_LESION5_VOL, SP_BRE1_LESION5_L, SP_BRE1_LESION5_W, SP_BRE1_LESION5_H,
	SP_BRE2_LESION1_VOL, SP_BRE2_LESION1_L, SP_BRE2_LESION1_W, SP_BRE2_LESION1_H, 
	SP_BRE2_LESION2_VOL, SP_BRE2_LESION2_L, SP_BRE2_LESION2_W, SP_BRE2_LESION2_H, 
	SP_BRE2_LESION3_VOL, SP_BRE2_LESION3_L, SP_BRE2_LESION3_W, SP_BRE2_LESION3_H, 
	SP_BRE2_LESION4_VOL, SP_BRE2_LESION4_L, SP_BRE2_LESION4_W, SP_BRE2_LESION4_H, 
	SP_BRE2_LESION5_VOL, SP_BRE2_LESION5_L, SP_BRE2_LESION5_W, SP_BRE2_LESION5_H,
	SP_BRE3_LESION1_VOL, SP_BRE3_LESION1_L, SP_BRE3_LESION1_W, SP_BRE3_LESION1_H, 
	SP_BRE3_LESION2_VOL, SP_BRE3_LESION2_L, SP_BRE3_LESION2_W, SP_BRE3_LESION2_H, 
	SP_BRE3_LESION3_VOL, SP_BRE3_LESION3_L, SP_BRE3_LESION3_W, SP_BRE3_LESION3_H, 
	SP_BRE3_LESION4_VOL, SP_BRE3_LESION4_L, SP_BRE3_LESION4_W, SP_BRE3_LESION4_H, 
	SP_BRE3_LESION5_VOL, SP_BRE3_LESION5_L, SP_BRE3_LESION5_W, SP_BRE3_LESION5_H,
	SP_BRE4_LESION1_VOL, SP_BRE4_LESION1_L, SP_BRE4_LESION1_W, SP_BRE4_LESION1_H, 
	SP_BRE4_LESION2_VOL, SP_BRE4_LESION2_L, SP_BRE4_LESION2_W, SP_BRE4_LESION2_H, 
	SP_BRE4_LESION3_VOL, SP_BRE4_LESION3_L, SP_BRE4_LESION3_W, SP_BRE4_LESION3_H, 
	SP_BRE4_LESION4_VOL, SP_BRE4_LESION4_L, SP_BRE4_LESION4_W, SP_BRE4_LESION4_H, 
	SP_BRE4_LESION5_VOL, SP_BRE4_LESION5_L, SP_BRE4_LESION5_W, SP_BRE4_LESION5_H,
	SP_BRE5_LESION1_VOL, SP_BRE5_LESION1_L, SP_BRE5_LESION1_W, SP_BRE5_LESION1_H, 
	SP_BRE5_LESION2_VOL, SP_BRE5_LESION2_L, SP_BRE5_LESION2_W, SP_BRE5_LESION2_H, 
	SP_BRE5_LESION3_VOL, SP_BRE5_LESION3_L, SP_BRE5_LESION3_W, SP_BRE5_LESION3_H, 
	SP_BRE5_LESION4_VOL, SP_BRE5_LESION4_L, SP_BRE5_LESION4_W, SP_BRE5_LESION4_H, 
	SP_BRE5_LESION5_VOL, SP_BRE5_LESION5_L, SP_BRE5_LESION5_W, SP_BRE5_LESION5_H,
	//SP Testicle
	SP_L_TESTIS_VOL, SP_L_TESTIS_L, SP_L_TESTIS_W, SP_L_TESTIS_H, SP_L_TESTIS_ARTERY, //SP_L_TESTIS_ARTERY_PS=SP_L_TESTIS_ARTERY, SP_L_TESTIS_ARTERY_ED,
	SP_R_TESTIS_VOL, SP_R_TESTIS_L, SP_R_TESTIS_W, SP_R_TESTIS_H, SP_R_TESTIS_ARTERY, //SP_R_TESTIS_ARTERY_PS=SP_R_TESTIS_ARTERY, SP_R_TESTIS_ARTERY_ED,
	SP_TES_L_LESION1_VOL, SP_TES_L_LESION1_L, SP_TES_L_LESION1_W, SP_TES_L_LESION1_H, 
	SP_TES_L_LESION2_VOL, SP_TES_L_LESION2_L, SP_TES_L_LESION2_W, SP_TES_L_LESION2_H, 
	SP_TES_L_LESION3_VOL, SP_TES_L_LESION3_L, SP_TES_L_LESION3_W, SP_TES_L_LESION3_H, 
	SP_TES_L_LESION4_VOL, SP_TES_L_LESION4_L, SP_TES_L_LESION4_W, SP_TES_L_LESION4_H, 
	SP_TES_L_LESION5_VOL, SP_TES_L_LESION5_L, SP_TES_L_LESION5_W, SP_TES_L_LESION5_H,  
	SP_TES_R_LESION1_VOL, SP_TES_R_LESION1_L, SP_TES_R_LESION1_W, SP_TES_R_LESION1_H, 
	SP_TES_R_LESION2_VOL, SP_TES_R_LESION2_L, SP_TES_R_LESION2_W, SP_TES_R_LESION2_H, 
	SP_TES_R_LESION3_VOL, SP_TES_R_LESION3_L, SP_TES_R_LESION3_W, SP_TES_R_LESION3_H, 
	SP_TES_R_LESION4_VOL, SP_TES_R_LESION4_L, SP_TES_R_LESION4_W, SP_TES_R_LESION4_H, 
	SP_TES_R_LESION5_VOL, SP_TES_R_LESION5_L, SP_TES_R_LESION5_W, SP_TES_R_LESION5_H,  
	//SP THyroid
	SP_ISTHMUS_AP, SP_LONG_L_LOBE, SP_AP_L_LOBE, SP_TR_L_LOBE, SP_LONG_R_LOBE, SP_AP_R_LOBE, SP_TR_R_LOBE,
	SP_SUPA_L_LOBE, //SP_SUPA_L_LOBE_PS=SP_SUPA_L_LOBE, SP_SUPA_L_LOBE_ED,
	SP_INFA_L_LOBE, //SP_INFA_L_LOBE_PS=SP_INFA_L_LOBE, SP_INFA_L_LOBE_ED, 
	SP_SUPA_R_LOBE, //SP_SUPA_R_LOBE_PS=SP_SUPA_R_LOBE, SP_SUPA_R_LOBE_ED,
	SP_INFA_R_LOBE, //SP_INFA_R_LOBE_PS=SP_INFA_R_LOBE, SP_INFA_R_LOBE_ED,
	SP_THY_LESION1_VOL, SP_THY_LESION1_L, SP_THY_LESION1_W, SP_THY_LESION1_H, 
	SP_THY_LESION2_VOL, SP_THY_LESION2_L, SP_THY_LESION2_W, SP_THY_LESION2_H,
	SP_THY_LESION3_VOL, SP_THY_LESION3_L, SP_THY_LESION3_W, SP_THY_LESION3_H, 
	SP_THY_LESION4_VOL, SP_THY_LESION4_L, SP_THY_LESION4_W, SP_THY_LESION4_H, 
	SP_THY_LESION5_VOL, SP_THY_LESION5_L, SP_THY_LESION5_W, SP_THY_LESION5_H, 
	//SP Eye
	SP_L_EYE_OA, SP_L_EYE_LENS, SP_L_EYE_AC, SP_L_EYE_ON,
	SP_R_EYE_OA, SP_R_EYE_LENS, SP_R_EYE_AC, SP_R_EYE_ON,

	SP_MEA_END
};
#else

enum EMeasureFactorySP{
	//SP Breast
	SP_L_GALACT_THICK = SP_MEA_START, 
	SP_R_GALACT_THICK,
	SP_BRE_L_LESION1_VOL, SP_BRE_L_LESION1_L, SP_BRE_L_LESION1_W, SP_BRE_L_LESION1_H, 
	SP_BRE_L_LESION2_VOL, SP_BRE_L_LESION2_L, SP_BRE_L_LESION2_W, SP_BRE_L_LESION2_H, 
	SP_BRE_L_LESION3_VOL, SP_BRE_L_LESION3_L, SP_BRE_L_LESION3_W, SP_BRE_L_LESION3_H, 
	SP_BRE_L_LESION4_VOL, SP_BRE_L_LESION4_L, SP_BRE_L_LESION4_W, SP_BRE_L_LESION4_H, 
	SP_BRE_L_LESION5_VOL, SP_BRE_L_LESION5_L, SP_BRE_L_LESION5_W, SP_BRE_L_LESION5_H,
       SP_BRE_R_LESION1_VOL, SP_BRE_R_LESION1_L, SP_BRE_R_LESION1_W, SP_BRE_R_LESION1_H, 
	   SP_BRE_R_LESION2_VOL, SP_BRE_R_LESION2_L, SP_BRE_R_LESION2_W, SP_BRE_R_LESION2_H, 
	   SP_BRE_R_LESION3_VOL, SP_BRE_R_LESION3_L, SP_BRE_R_LESION3_W, SP_BRE_R_LESION3_H, 
	   SP_BRE_R_LESION4_VOL, SP_BRE_R_LESION4_L, SP_BRE_R_LESION4_W, SP_BRE_R_LESION4_H, 
	   SP_BRE_R_LESION5_VOL, SP_BRE_R_LESION5_L, SP_BRE_R_LESION5_W, SP_BRE_R_LESION5_H,
	//SP Testicle
	SP_L_TESTIS_VOL, SP_L_TESTIS_L, SP_L_TESTIS_W, SP_L_TESTIS_H, SP_L_TESTIS_ARTERY, 
	SP_R_TESTIS_VOL, SP_R_TESTIS_L, SP_R_TESTIS_W, SP_R_TESTIS_H, SP_R_TESTIS_ARTERY, 
	SP_TES_L_LESION1_VOL, SP_TES_L_LESION1_L, SP_TES_L_LESION1_W, SP_TES_L_LESION1_H, 
	SP_TES_L_LESION2_VOL, SP_TES_L_LESION2_L, SP_TES_L_LESION2_W, SP_TES_L_LESION2_H, 
	SP_TES_L_LESION3_VOL, SP_TES_L_LESION3_L, SP_TES_L_LESION3_W, SP_TES_L_LESION3_H, 
	SP_TES_L_LESION4_VOL, SP_TES_L_LESION4_L, SP_TES_L_LESION4_W, SP_TES_L_LESION4_H, 
	SP_TES_L_LESION5_VOL, SP_TES_L_LESION5_L, SP_TES_L_LESION5_W, SP_TES_L_LESION5_H,  
	SP_TES_R_LESION1_VOL, SP_TES_R_LESION1_L, SP_TES_R_LESION1_W, SP_TES_R_LESION1_H, 
	SP_TES_R_LESION2_VOL, SP_TES_R_LESION2_L, SP_TES_R_LESION2_W, SP_TES_R_LESION2_H, 
	SP_TES_R_LESION3_VOL, SP_TES_R_LESION3_L, SP_TES_R_LESION3_W, SP_TES_R_LESION3_H, 
	SP_TES_R_LESION4_VOL, SP_TES_R_LESION4_L, SP_TES_R_LESION4_W, SP_TES_R_LESION4_H, 
	SP_TES_R_LESION5_VOL, SP_TES_R_LESION5_L, SP_TES_R_LESION5_W, SP_TES_R_LESION5_H,  
	//SP THyroid
	SP_ISTHMUS_AP, SP_LONG_L_LOBE, SP_AP_L_LOBE, SP_TR_L_LOBE, SP_LONG_R_LOBE, SP_AP_R_LOBE, SP_TR_R_LOBE,
	SP_SUPA_L_LOBE, 
	SP_INFA_L_LOBE, 
	SP_SUPA_R_LOBE,
	SP_INFA_R_LOBE,
	SP_THY_LESION1_VOL, SP_THY_LESION1_L, SP_THY_LESION1_W, SP_THY_LESION1_H, 
	SP_THY_LESION2_VOL, SP_THY_LESION2_L, SP_THY_LESION2_W, SP_THY_LESION2_H,
	SP_THY_LESION3_VOL, SP_THY_LESION3_L, SP_THY_LESION3_W, SP_THY_LESION3_H, 
	SP_THY_LESION4_VOL, SP_THY_LESION4_L, SP_THY_LESION4_W, SP_THY_LESION4_H, 
	SP_THY_LESION5_VOL, SP_THY_LESION5_L, SP_THY_LESION5_W, SP_THY_LESION5_H, 
	//SP Eye
	SP_L_EYE_OA, SP_L_EYE_LENS, SP_L_EYE_AC, SP_L_EYE_ON,
	SP_R_EYE_OA, SP_R_EYE_LENS, SP_R_EYE_AC, SP_R_EYE_ON,

	SP_MEA_END
};
#endif
#endif

enum EMultiSP{
SP_L_TESTIS_ARTERY_MULTI = SP_MULTI_START, SP_R_TESTIS_ARTERY_MULTI, SP_SUPA_L_LOBE_MULTI, SP_INFA_L_LOBE_MULTI, SP_SUPA_R_LOBE_MULTI, SP_INFA_R_LOBE_MULTI, SP_MULTI_END 
}; 
#ifdef VET      //兽用

enum ECalcSP{ 
	SP_BRE1_LESION1_VOL_C = SP_CALC_START, SP_BRE1_LESION2_VOL_C, SP_BRE1_LESION3_VOL_C, SP_BRE1_LESION4_VOL_C, SP_BRE1_LESION5_VOL_C, SP_BRE2_LESION1_VOL_C, SP_BRE2_LESION2_VOL_C, SP_BRE2_LESION3_VOL_C, SP_BRE2_LESION4_VOL_C, SP_BRE2_LESION5_VOL_C, SP_BRE3_LESION1_VOL_C, SP_BRE3_LESION2_VOL_C, SP_BRE3_LESION3_VOL_C, SP_BRE3_LESION4_VOL_C, SP_BRE3_LESION5_VOL_C, SP_BRE4_LESION1_VOL_C, SP_BRE4_LESION2_VOL_C, SP_BRE4_LESION3_VOL_C, SP_BRE4_LESION4_VOL_C, SP_BRE4_LESION5_VOL_C, SP_BRE5_LESION1_VOL_C, SP_BRE5_LESION2_VOL_C, SP_BRE5_LESION3_VOL_C, SP_BRE5_LESION4_VOL_C, SP_BRE5_LESION5_VOL_C, SP_L_TESTIS_VOL_C, SP_R_TESTIS_VOL_C, SP_TES_L_LESION1_VOL_C, SP_TES_L_LESION2_VOL_C, SP_TES_L_LESION3_VOL_C, SP_TES_L_LESION4_VOL_C, SP_TES_L_LESION5_VOL_C, SP_TES_R_LESION1_VOL_C, SP_TES_R_LESION2_VOL_C, SP_TES_R_LESION3_VOL_C, SP_TES_R_LESION4_VOL_C, SP_TES_R_LESION5_VOL_C, SP_THY_LESION1_VOL_C, SP_THY_LESION2_VOL_C, SP_THY_LESION3_VOL_C, SP_THY_LESION4_VOL_C, SP_THY_LESION5_VOL_C, SP_CALC_END
};
#else
enum ECalcSP{ 
SP_BRE_L_LESION1_VOL_C = SP_CALC_START, SP_BRE_L_LESION2_VOL_C, SP_BRE_L_LESION3_VOL_C, SP_BRE_L_LESION4_VOL_C, SP_BRE_L_LESION5_VOL_C, SP_BRE_R_LESION1_VOL_C, SP_BRE_R_LESION2_VOL_C, SP_BRE_R_LESION3_VOL_C, SP_BRE_R_LESION4_VOL_C, SP_BRE_R_LESION5_VOL_C,
SP_L_TESTIS_VOL_C, SP_R_TESTIS_VOL_C, SP_TES_L_LESION1_VOL_C, SP_TES_L_LESION2_VOL_C, SP_TES_L_LESION3_VOL_C, SP_TES_L_LESION4_VOL_C, SP_TES_L_LESION5_VOL_C, SP_TES_R_LESION1_VOL_C, SP_TES_R_LESION2_VOL_C, SP_TES_R_LESION3_VOL_C, SP_TES_R_LESION4_VOL_C, SP_TES_R_LESION5_VOL_C, SP_THY_LESION1_VOL_C, SP_THY_LESION2_VOL_C, SP_THY_LESION3_VOL_C, SP_THY_LESION4_VOL_C, SP_THY_LESION5_VOL_C, SP_CALC_END
};
#endif

enum EMeasureFactoryVS{
	//Carotid
    VS_L_CCA = VS_MEA_START, VS_R_CCA, VS_L_DIST_CCA, VS_R_DIST_CCA, VS_L_MID_CCA, VS_R_MID_CCA, VS_L_PROX_CCA, VS_R_PROX_CCA, 
	VS_L_ICA, VS_R_ICA, VS_L_DIST_ICA, VS_R_DIST_ICA, VS_L_MID_ICA, VS_R_MID_ICA, VS_L_PROX_ICA, VS_R_PROX_ICA, 
	VS_L_DIST_LSV, VS_R_DIST_LSV, VS_L_MID_LSV, VS_R_MID_LSV, VS_L_PROX_LSV, VS_R_PROX_LSV, VS_L_DIST_CEPH_V, VS_R_DIST_CEPH_V, 
	VS_L_MID_CEPH_V, VS_R_MID_CEPH_V, VS_L_PROX_CEPH_V, VS_R_PROX_CEPH_V, VS_L_PROX_ECA, VS_R_PROX_ECA, VS_L_BRACHIOCEPH_A, VS_R_BRACHIOCEPH_A, 
	VS_L_BRACHIOCEPH_V, VS_R_BRACHIOCEPH_V, VS_L_BULB, VS_R_BULB, VS_L_VERTEBRAL_A, VS_R_VERTEBRAL_A, VS_L_IJV, VS_R_IJV,  VS_L_MID_SCL_A, VS_R_MID_SCL_A, VS_L_PROX_SCL_A, VS_R_PROX_SCL_A, VS_L_MID_SCL_V, VS_R_MID_SCL_V, VS_L_PROX_SCL_V, VS_R_PROX_SCL_V, 
	//LE Art
    VS_L_CFA, VS_R_CFA, VS_L_CFV, VS_R_CFV, VS_L_COM_ILIAC_A, VS_R_COM_ILIAC_A, VS_L_COM_ILIAC_V, VS_R_COM_ILIAC_V, 
	VS_L_DIST_ATA, VS_R_DIST_ATA, VS_L_MID_ATA, VS_R_MID_ATA, VS_L_PROX_ATA, VS_R_PROX_ATA, VS_L_DIST_ATV, VS_R_DIST_ATV, 
	VS_L_MID_ATV, VS_R_MID_ATV, VS_L_PROX_ATV, VS_R_PROX_ATV, VS_L_DIST_GSV_CALF, VS_R_DIST_GSV_CALF, VS_L_MID_GSV_CALF, VS_R_MID_GSV_CALF, 
	VS_L_PROX_GSV_CALF, VS_R_PROX_GSV_CALF, VS_L_DIST_GSV_THIGH, VS_R_DIST_GSV_THIGH, VS_L_MID_GSV_THIGH, VS_R_MID_GSV_THIGH, VS_L_PROX_GSV_THIGH, VS_R_PROX_GSV_THIGH, 
	VS_L_DIST_PERO_A, VS_R_DIST_PERO_A, VS_L_MID_PERO_A, VS_R_MID_PERO_A, VS_L_PROX_PERO_A, VS_R_PROX_PERO_A, VS_L_DIST_PERO_V, VS_R_DIST_PERO_V, 
	VS_L_MID_PERO_V, VS_R_MID_PERO_V, VS_L_PROX_PERO_V, VS_R_PROX_PERO_V, VS_L_DIST_POP_A, VS_R_DIST_POP_A, VS_L_MID_POP_A, VS_R_MID_POP_A, 
	VS_L_PROX_POP_A, VS_R_PROX_POP_A, VS_L_DIST_POP_V, VS_R_DIST_POP_V, VS_L_MID_POP_V, VS_R_MID_POP_V, VS_L_PROX_POP_V, VS_R_PROX_POP_V, 
	VS_L_DIST_PTA, VS_R_DIST_PTA, VS_L_MID_PTA, VS_R_MID_PTA, VS_L_PROX_PTA, VS_R_PROX_PTA, VS_L_DIST_PTV, VS_R_DIST_PTV, 
	VS_L_MID_PTV, VS_R_MID_PTV, VS_L_PROX_PTV, VS_R_PROX_PTV, VS_L_DIST_SFA, VS_R_DIST_SFA, VS_L_MID_SFA, VS_R_MID_SFA, 
	VS_L_PROX_SFA, VS_R_PROX_SFA, VS_L_DIST_SFV, VS_R_DIST_SFV, VS_L_MID_SFV, VS_R_MID_SFV, VS_L_PROX_SFV, VS_R_PROX_SFV, 
	VS_L_DOR_PEDIS, VS_R_DOR_PEDIS, VS_L_EXT_ILIAC_A, VS_R_EXT_ILIAC_A, VS_L_EXT_ILIAC_V, VS_R_EXT_ILIAC_V, VS_L_INT_ILIAC_A, VS_R_INT_ILIAC_A, 
	VS_L_INT_ILIAC_V, VS_R_INT_ILIAC_V, VS_L_LAT_SURAL_V, VS_R_LAT_SURAL_V, VS_L_PROX_PFA, VS_R_PROX_PFA, VS_L_SFJ, VS_R_SFJ, 
	//UE Art
    VS_L_ANTECUBE, VS_R_ANTECUBE, VS_L_AX_A, VS_R_AX_A, VS_L_AX_V, VS_R_AX_V, VS_L_DIST_BASILIC_V, VS_R_DIST_BASILIC_V, 
	VS_L_MID_BASILIC_V, VS_R_MID_BASILIC_V, VS_L_PROX_BASILIC_V, VS_R_PROX_BASILIC_V, VS_L_DIST_BRACH_A, VS_R_DIST_BRACH_A, VS_L_PROX_BRACH_A, VS_R_PROX_BRACH_A, 
	VS_L_DIST_BRACH_V, VS_R_DIST_BRACH_V, VS_L_PROX_BRACH_V, VS_R_PROX_BRACH_V, VS_L_DIST_RAD_A, VS_R_DIST_RAD_A, VS_L_MID_RAD_A, VS_R_MID_RAD_A, 
	VS_L_PROX_RAD_A, VS_R_PROX_RAD_A, VS_L_DIST_RAD_V, VS_R_DIST_RAD_V, VS_L_MID_RAD_V, VS_R_MID_RAD_V, VS_L_PROX_RAD_V, VS_R_PROX_RAD_V, 
	VS_L_DIST_ULNAR_A, VS_R_DIST_ULNAR_A, VS_L_MID_ULNAR_A, VS_R_MID_ULNAR_A, VS_L_PROX_ULNAR_A, VS_R_PROX_ULNAR_A, VS_L_DIST_ULNAR_V, VS_R_DIST_ULNAR_V, 
	VS_L_MID_ULNAR_V, VS_R_MID_ULNAR_V, VS_L_PROX_ULNAR_V, VS_R_PROX_ULNAR_V,
	VS_MEA_END
};

enum EMultiVS{
	//Carotid
    	VS_L_CCA_MULTI = VS_MULTI_START, VS_R_CCA_MULTI, VS_L_DIST_CCA_MULTI, VS_R_DIST_CCA_MULTI, VS_L_MID_CCA_MULTI, VS_R_MID_CCA_MULTI, VS_L_PROX_CCA_MULTI, VS_R_PROX_CCA_MULTI, VS_L_ICA_MULTI, VS_R_ICA_MULTI, VS_L_DIST_ICA_MULTI, VS_R_DIST_ICA_MULTI, VS_L_MID_ICA_MULTI, VS_R_MID_ICA_MULTI, VS_L_PROX_ICA_MULTI, VS_R_PROX_ICA_MULTI, VS_L_DIST_LSV_MULTI, VS_R_DIST_LSV_MULTI, VS_L_MID_LSV_MULTI, VS_R_MID_LSV_MULTI, VS_L_PROX_LSV_MULTI, VS_R_PROX_LSV_MULTI, VS_L_DIST_CEPH_V_MULTI, VS_R_DIST_CEPH_V_MULTI, VS_L_MID_CEPH_V_MULTI, VS_R_MID_CEPH_V_MULTI, VS_L_PROX_CEPH_V_MULTI, VS_R_PROX_CEPH_V_MULTI, VS_L_PROX_ECA_MULTI, VS_R_PROX_ECA_MULTI, VS_L_BRACHIOCEPH_A_MULTI, VS_R_BRACHIOCEPH_A_MULTI, VS_L_BRACHIOCEPH_V_MULTI, VS_R_BRACHIOCEPH_V_MULTI, VS_L_BULB_MULTI, VS_R_BULB_MULTI, VS_L_VERTEBRAL_A_MULTI, VS_R_VERTEBRAL_A_MULTI, VS_L_IJV_MULTI, VS_R_IJV_MULTI, 
	//LE Art
    	VS_L_CFA_MULTI, VS_R_CFA_MULTI, VS_L_CFV_MULTI, VS_R_CFV_MULTI, VS_L_COM_ILIAC_A_MULTI, VS_R_COM_ILIAC_A_MULTI, VS_L_COM_ILIAC_V_MULTI, VS_R_COM_ILIAC_V_MULTI, VS_L_DIST_ATA_MULTI, VS_R_DIST_ATA_MULTI, VS_L_MID_ATA_MULTI, VS_R_MID_ATA_MULTI, VS_L_PROX_ATA_MULTI, VS_R_PROX_ATA_MULTI, VS_L_DIST_ATV_MULTI, VS_R_DIST_ATV_MULTI, VS_L_MID_ATV_MULTI, VS_R_MID_ATV_MULTI, VS_L_PROX_ATV_MULTI, VS_R_PROX_ATV_MULTI, VS_L_DIST_GSV_CALF_MULTI, VS_R_DIST_GSV_CALF_MULTI, VS_L_MID_GSV_CALF_MULTI, VS_R_MID_GSV_CALF_MULTI, VS_L_PROX_GSV_CALF_MULTI, VS_R_PROX_GSV_CALF_MULTI, VS_L_DIST_GSV_THIGH_MULTI, VS_R_DIST_GSV_THIGH_MULTI, VS_L_MID_GSV_THIGH_MULTI, VS_R_MID_GSV_THIGH_MULTI, VS_L_PROX_GSV_THIGH_MULTI, VS_R_PROX_GSV_THIGH_MULTI, VS_L_DIST_PERO_A_MULTI, VS_R_DIST_PERO_A_MULTI, VS_L_MID_PERO_A_MULTI, VS_R_MID_PERO_A_MULTI, VS_L_PROX_PERO_A_MULTI, VS_R_PROX_PERO_A_MULTI, VS_L_DIST_PERO_V_MULTI, VS_R_DIST_PERO_V_MULTI, VS_L_MID_PERO_V_MULTI, VS_R_MID_PERO_V_MULTI, VS_L_PROX_PERO_V_MULTI, VS_R_PROX_PERO_V_MULTI, VS_L_DIST_POP_A_MULTI, VS_R_DIST_POP_A_MULTI, VS_L_MID_POP_A_MULTI, VS_R_MID_POP_A_MULTI, VS_L_PROX_POP_A_MULTI, VS_R_PROX_POP_A_MULTI, VS_L_DIST_POP_V_MULTI, VS_R_DIST_POP_V_MULTI, VS_L_MID_POP_V_MULTI, VS_R_MID_POP_V_MULTI, VS_L_PROX_POP_V_MULTI, VS_R_PROX_POP_V_MULTI, VS_L_DIST_PTA_MULTI, VS_R_DIST_PTA_MULTI, VS_L_MID_PTA_MULTI, VS_R_MID_PTA_MULTI, VS_L_PROX_PTA_MULTI, VS_R_PROX_PTA_MULTI, VS_L_DIST_PTV_MULTI, VS_R_DIST_PTV_MULTI, VS_L_MID_PTV_MULTI, VS_R_MID_PTV_MULTI, VS_L_PROX_PTV_MULTI, VS_R_PROX_PTV_MULTI, VS_L_DIST_SFA_MULTI, VS_R_DIST_SFA_MULTI, VS_L_MID_SFA_MULTI, VS_R_MID_SFA_MULTI, VS_L_PROX_SFA_MULTI, VS_R_PROX_SFA_MULTI, VS_L_DIST_SFV_MULTI, VS_R_DIST_SFV_MULTI, VS_L_MID_SFV_MULTI, VS_R_MID_SFV_MULTI, VS_L_PROX_SFV_MULTI, VS_R_PROX_SFV_MULTI, VS_L_DOR_PEDIS_MULTI, VS_R_DOR_PEDIS_MULTI, VS_L_EXT_ILIAC_A_MULTI, VS_R_EXT_ILIAC_A_MULTI, VS_L_EXT_ILIAC_V_MULTI, VS_R_EXT_ILIAC_V_MULTI, VS_L_INT_ILIAC_A_MULTI, VS_R_INT_ILIAC_A_MULTI, VS_L_INT_ILIAC_V_MULTI, VS_R_INT_ILIAC_V_MULTI, VS_L_LAT_SURAL_V_MULTI, VS_R_LAT_SURAL_V_MULTI, VS_L_PROX_PFA_MULTI, VS_R_PROX_PFA_MULTI, VS_L_SFJ_MULTI, VS_R_SFJ_MULTI, 
	//UE Art
    	VS_L_ANTECUBE_MULTI, VS_R_ANTECUBE_MULTI, VS_L_AX_A_MULTI, VS_R_AX_A_MULTI, VS_L_AX_V_MULTI, VS_R_AX_V_MULTI, VS_L_DIST_BASILIC_V_MULTI, VS_R_DIST_BASILIC_V_MULTI, VS_L_MID_BASILIC_V_MULTI, VS_R_MID_BASILIC_V_MULTI, VS_L_PROX_BASILIC_V_MULTI, VS_R_PROX_BASILIC_V_MULTI, VS_L_DIST_BRACH_A_MULTI, VS_R_DIST_BRACH_A_MULTI, VS_L_PROX_BRACH_A_MULTI, VS_R_PROX_BRACH_A_MULTI, VS_L_DIST_BRACH_V_MULTI, VS_R_DIST_BRACH_V_MULTI, VS_L_PROX_BRACH_V_MULTI, VS_R_PROX_BRACH_V_MULTI, VS_L_DIST_RAD_A_MULTI, VS_R_DIST_RAD_A_MULTI, VS_L_MID_RAD_A_MULTI, VS_R_MID_RAD_A_MULTI, VS_L_PROX_RAD_A_MULTI, VS_R_PROX_RAD_A_MULTI, VS_L_DIST_RAD_V_MULTI, VS_R_DIST_RAD_V_MULTI, VS_L_MID_RAD_V_MULTI, VS_R_MID_RAD_V_MULTI, VS_L_PROX_RAD_V_MULTI, VS_R_PROX_RAD_V_MULTI, VS_L_DIST_ULNAR_A_MULTI, VS_R_DIST_ULNAR_A_MULTI, VS_L_MID_ULNAR_A_MULTI, VS_R_MID_ULNAR_A_MULTI, VS_L_PROX_ULNAR_A_MULTI, VS_R_PROX_ULNAR_A_MULTI, VS_L_DIST_ULNAR_V_MULTI, VS_R_DIST_ULNAR_V_MULTI, VS_L_MID_ULNAR_V_MULTI, VS_R_MID_ULNAR_V_MULTI, VS_L_PROX_ULNAR_V_MULTI, VS_R_PROX_ULNAR_V_MULTI, VS_L_MID_SCL_A_MULTI, VS_R_MID_SCL_A_MULTI, VS_L_PROX_SCL_A_MULTI, VS_R_PROX_SCL_A_MULTI, VS_L_MID_SCL_V_MULTI, VS_R_MID_SCL_V_MULTI, VS_L_PROX_SCL_V_MULTI, VS_R_PROX_SCL_V_MULTI,

	VS_MULTI_END
};

enum ECalcVS{
	VS_L_ICA_CCA_RATIO = VS_CALC_START, VS_R_ICA_CCA_RATIO, VS_CALC_END
};

enum EMeasureFactoryTCD{
	TCD_L_ACA = TCD_MEA_START,
	TCD_R_ACA, TCD_L_VERTEBRAL_A, TCD_R_VERTEBRAL_A, TCD_L_MCA, TCD_R_MCA, TCD_L_PCA, TCD_R_PCA, TCD_BASILAR_A,
	TCD_MEA_END
};
enum EMultiTCD{
	TCD_L_ACA_MULTI = TCD_MULTI_START,
	TCD_R_ACA_MULTI, TCD_L_VERTEBRAL_A_MULTI, TCD_R_VERTEBRAL_A_MULTI, TCD_L_MCA_MULTI, TCD_R_MCA_MULTI, TCD_L_PCA_MULTI, TCD_R_PCA_MULTI, TCD_BASILAR_A_MULTI,
	TCD_MULTI_END
};
enum ECalcTCD{
	TCD_CALC_END = TCD_CALC_START
};

enum EMeasureFactoryOrtho{
	ORTHO_LT_HIP = ORTHO_MEA_START, ORTHO_RT_HIP,
	ORTHO_MEA_END
};
enum EMultiOrtho{
	ORTHO_LT_HIP_MULTI = ORTHO_MULTI_START, ORTHO_RT_HIP_MULTI,
	ORTHO_MULTI_END
};
enum ECalcOrtho{
	 ORTHO_CALC_END = ORTHO_CALC_START
};

enum EMeasureEFW{
	OB_EFW_NEW = EFW_MEA_START, 
	EFW_MEA_END
};


/*
#ifdef VET
enum EMeasureOBVet{
	OB_DOG_GSD = OB_MEA_VET_START,OB_DOG_CRL, OB_DOG_HD, OB_DOG_BD,
	OB_CAT_HD, OB_CAT_BD,
	OB_SHEEP_CRL,
	OB_SWINE_HLA, OB_SWINE_SLA,
	OB_BOVINE_CRL_H, OB_BOVINE_CRL_K, OB_BOVINE_CRL_W, OB_BOVINE_BBD, OB_BOVINE_BTD, OB_BOVINE_BUD,
	OB_EQUINE_GSD, OB_EQUINE_ERD, OB_EQUINE_ESD, OB_EQUINE_EED, OB_MEA_VET_END
};

enum ECalcOBVet{
	OB_DOG_GSD_GW = OB_CALC_VET_START, OB_DOG_GSD_EDCB, OB_DOG_HD_GW, OB_DOG_HD_EDCB, OB_DOG_CRL_GW, OB_DOG_CRL_EDCB, OB_DOG_BD_GW, OB_DOG_BD_EDCB,
	OB_CAT_HD_GW, OB_CAT_HD_EDCB, OB_CAT_BD_GW, OB_CAT_BD_EDCB,
	OB_SHEEP_CRL_GW, OB_SHEEP_CRL_EDCB,
	OB_SWINE_HLA_GW, OB_SWINE_HLA_EDCB, OB_SWINE_SLA_GW, OB_SWINE_SLA_EDCB,
	OB_BOVINE_CRL_H_GW, OB_BOVINE_CRL_H_EDCB, OB_BOVINE_CRL_K_GW, OB_BOVINE_CRL_K_EDCB, OB_BOVINE_CRL_W_GW, OB_BOVINE_CRL_W_EDCB, OB_BOVINE_BBD_GW, OB_BOVINE_BBD_EDCB, OB_BOVINE_BTD_GW, OB_BOVINE_BTD_EDCB, OB_BOVINE_BUD_GW, OB_BOVINE_BUD_EDCB,
	OB_EQUINE_GSD_GW, OB_EQUINE_GSD_EDCB, OB_EQUINE_ERD_GW, OB_EQUINE_ERD_EDCB, OB_EQUINE_ESD_GW, OB_EQUINE_ESD_EDCB, OB_EQUINE_EED_GW,OB_EQUINE_EED_EDCB, OB_CALC_VET_END
};

enum EMeasureTendonVet{
	TEN_1AREA = TEN_MEA_VET_START, TEN_1AREA1, TEN_1AREA2, TEN_1AREA3, 
	TEN_2AREA, TEN_2AREA1, TEN_2AREA2, TEN_2AREA3, 
	TEN_3AREA, TEN_3AREA1, TEN_3AREA2, TEN_3AREA3, 
	TEN_4AREA, TEN_4AREA1, TEN_4AREA2, TEN_4AREA3, 
	TEN_5AREA, TEN_5AREA1, TEN_5AREA2, TEN_5AREA3, 
	TEN_6AREA, TEN_6AREA1, TEN_6AREA2, TEN_6AREA3, 
	TEN_7AREA, TEN_7AREA1, TEN_7AREA2, TEN_7AREA3, 
	TEN_8AREA, TEN_8AREA1, TEN_8AREA2, TEN_8AREA3, 
	TEN_9AREA, TEN_9AREA1, TEN_9AREA2, TEN_9AREA3, 
	TEN_10AREA, TEN_10AREA1, TEN_10AREA2, TEN_10AREA3, 
	TEN_11AREA, TEN_11AREA1, TEN_11AREA2, TEN_11AREA3,
	TEN_MEA_VET_END
};

enum ECalcTenVet{
	TEN_AREA_RATIO1 = TEN_CALC_VET_START, TEN_AREA_RATIO2, TEN_AREA_RATIO3, TEN_AREA_RATIO4, TEN_AREA_RATIO5, TEN_AREA_RATIO6, TEN_AREA_RATIO7, TEN_AREA_RATIO8, TEN_AREA_RATIO9, TEN_AREA_RATIO10, TEN_AREA_RATIO11, TEN_CALC_VET_END
};

#define CALC_END ORTHO_CALC_END
#endif
*/

//添加 动物超 TD科别的:枚举
//hlx 12.20
//#ifdef VET
/*
enum EMeasureFactoryTD{
	TD_LESION1_AREA=TD_MEA_START, TD_LESION2_AREA, TD_LESION3_AREA, TD_LESION4_AREA,
	TD_LESION5_AREA, TD_LESION6_AREA, TD_LESION7_AREA, TD_LESION8_AREA, TD_LESION9_AREA,
	TD_LESION10_AREA,
	TD_MEA_END
};

enum EMultiTD{
	TD_LESION1_AREA_MULTI = TD_MULTI_START, TD_LESION2_AREA_MULTI, TD_LESION3_AREA_MULTI, TD_LESION4_AREA_MULTI,
	TD_LESION5_AREA_MULTI, TD_LESION6_AREA_MULTI, TD_LESION7_AREA_MULTI, TD_LESION8_AREA_MULTI, TD_LESION9_AREA_MULTI,
	TD_LESION10_AREA_MULTI,
	TD_MULTI_END
};
*/
#ifdef VET
enum EMeasureFactoryTD{
	TD_LES1_AREA = TD_MEA_START, TD_LES1_AREA1, TD_LES1_AREA2, TD_LES1_AREA3,
	TD_LES2_AREA, TD_LES2_AREA1, TD_LES2_AREA2, TD_LES2_AREA3,
	TD_LES3_AREA, TD_LES3_AREA1, TD_LES3_AREA2, TD_LES3_AREA3,
	TD_LES4_AREA, TD_LES4_AREA1, TD_LES4_AREA2, TD_LES4_AREA3,
	TD_LES5_AREA, TD_LES5_AREA1, TD_LES5_AREA2, TD_LES5_AREA3,
	TD_LES6_AREA, TD_LES6_AREA1, TD_LES6_AREA2, TD_LES6_AREA3,
	TD_LES7_AREA, TD_LES7_AREA1, TD_LES7_AREA2, TD_LES7_AREA3,
	TD_LES8_AREA, TD_LES8_AREA1, TD_LES8_AREA2, TD_LES8_AREA3,
	TD_LES9_AREA, TD_LES9_AREA1, TD_LES9_AREA2, TD_LES9_AREA3,
	TD_LES10_AREA, TD_LES10_AREA1, TD_LES10_AREA2, TD_LES10_AREA3,
	TD_LES11_AREA, TD_LES11_AREA1, TD_LES11_AREA2, TD_LES11_AREA3,
	TD_MEA_END
};

//hlx 1.12
/*
enum EMultiTD{
	TD_LESION1_AREA_MULTI = TD_MULTI_START, TD_LESION2_AREA_MULTI, TD_LESION3_AREA_MULTI, TD_LESION4_AREA_MULTI,
	TD_LESION5_AREA_MULTI, TD_LESION6_AREA_MULTI, TD_LESION7_AREA_MULTI, TD_LESION8_AREA_MULTI, TD_LESION9_AREA_MULTI,
	TD_LESION10_AREA_MULTI, TD_LESION11_AREA_MULTI,
	TD_MULTI_END
};

enum ECalcTD{
	TD_AREA_RATIO1 = TD_CALC_START, TD_AREA_RATIO2, TD_AREA_RATIO3, TD_AREA_RATIO4, 
	TD_AREA_RATIO5, TD_AREA_RATIO6, TD_AREA_RATIO7, TD_AREA_RATIO8, TD_AREA_RATIO9, 
	TD_AREA_RATIO10, TD_AREA_RATIO11, TD_CALC_END
};
*/
enum EMultiTD{
	TD_MULTI_END = TD_MULTI_START,
};

enum ECalcTD{
	TD_CALC_END = TD_CALC_START
};

//添加 动物超 动物产科 原来人用的产科保留
//hlx 12.23
enum EMeasureFactoryAnOB{
	ANOB_DOG_GSD = ANOB_MEA_START, ANOB_DOG_CRL, ANOB_DOG_HD, ANOB_DOG_BD,
	ANOB_CAT_HD, ANOB_CAT_BD,
	ANOB_SHEEP_CRL,
	ANOB_SWINE_HL, ANOB_SWINE_SL,
	ANOB_BOVINE_KCRL, ANOB_BOVINE_WCRL, ANOB_BOVINE_HCRL, ANOB_BOVINE_BBD, ANOB_BOVINE_BTD, ANOB_BOVINE_BUD,
	ANOB_EQUINE_GSD, ANOB_EQUINE_ERD, ANOB_EQUINE_ESD, ANOB_EQUINE_EED,
	ANOB_MEA_END
};
//添加 动物超 动物产科 原来人用的产科保留
//hlx 12.23
enum EMultiAnOB{
	ANOB_MULTI_END = ANOB_MULTI_START
};
//添加 动物超 动物产科 原来人用的产科保留
//hlx 12.23
enum ECalcAnOB{
	//dog
	ANOB_DOG_GSD_GW = ANOB_CALC_START, ANOB_DOG_GSD_EDCB, ANOB_DOG_CRL_GW, ANOB_DOG_CRL_EDCB, ANOB_DOG_HD_GW, ANOB_DOG_HD_EDCB,
	ANOB_DOG_BD_GW, ANOB_DOG_BD_EDCB,
	//cat
	ANOB_CAT_HD_GW, ANOB_CAT_HD_EDCB, ANOB_CAT_BD_GW, ANOB_CAT_BD_EDCB,
	//sheep
	ANOB_SHEEP_CRL_GW, ANOB_SHEEP_CRL_EDCB,
	//swine
	ANOB_SWINE_HL_GW, ANOB_SWINE_HL_EDCB, ANOB_SWINE_SL_GW, ANOB_SWINE_SL_EDCB,
	//bovine
	ANOB_BOVINE_KCRL_GW, ANOB_BOVINE_KCRL_EDCB, ANOB_BOVINE_WCRL_GW, ANOB_BOVINE_WCRL_EDCB, ANOB_BOVINE_HCRL_GW, 
	ANOB_BOVINE_HCRL_EDCB, ANOB_BOVINE_BBD_GW, ANOB_BOVINE_BBD_EDCB, ANOB_BOVINE_BTD_GW, ANOB_BOVINE_BTD_EDCB,
	ANOB_BOVINE_BUD_GW, ANOB_BOVINE_BUD_EDCB,
	//equine
	ANOB_EQUINE_GSD_GW, ANOB_EQUINE_GSD_EDCB, ANOB_EQUINE_ERD_GW, ANOB_EQUINE_ERD_EDCB, 
	ANOB_EQUINE_ESD_GW, ANOB_EQUINE_ESD_EDCB, ANOB_EQUINE_EED_GW, ANOB_EQUINE_EED_EDCB,
	ANOB_CALC_END
};
#endif
//========有多种计算方法的计算=====================
#define CALC_METHOD_START 0
enum EMethodCalc{
	ADULT_EDV_METH = CALC_METHOD_START, ADULT_ESV_METH, OB_EFW_METH, CALC_METHOD_END 	
};

enum EUNITS{
	CM, CMS, CMS2, CM2, CM3, SEC, BPM, KG, MMHG, ANG, LMIN, LMINM2, PERCENT, CIRCS, NOUNIT, UNIT_END 
};

struct CustomUnit
{
    std::string unit1;
    std::string unit2;
    std::string unit3;
};

const CustomUnit CustomUnitArray[] =
{
    {"cm", "mm", ""},
    {"cm/s", "mm/s", "m/s"},
    {"cm/s²", "mm/s²", "m/s²"},
    {"cm²", "mm²", ""},
    {"cm³", "mm³", ""},
    {"s", "ms", ""},
    {"bpm", "", ""},
    {"kg", "g", ""},
    {"mmHg", "", ""},
    {"˚", "", ""},
    {"l/min", "", ""},
    {"l/min/m²", "", ""},
    {"%", "", ""},
    {"circ/s", "", ""},
    {"", "", ""}
};

const char units[][10] = {"cm", "cm/s", "cm/s²", "cm²", "cm³", "s", "bpm", "kg", "mmHg", "˚", "l/min", "l/min/m²", "%", "circ/s", "\0" };
#endif
