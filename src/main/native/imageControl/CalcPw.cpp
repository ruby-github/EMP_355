/*
 * 2009, 深圳恩普电子技术有限公司
 *
 * @file: AbsCalcPw.cpp
 * @brief: abstract class, in charge of pw imaging calculation
 *
 * version: V1.0
 * date: 2009-5-21
 * @author: zhanglei
 */

#include "imageControl/CalcPw.h"
#include "imageControl/BandPassFilterPw.h"
#include <ParaDef.h>
#include "imageControl/Calc2D.h"
FpgaPw CalcPw::m_fpga;
FpgaCtrl2D CalcPw::m_fpga2D;
#if (defined(EMP_355) || defined(EMP_340))
const short CalcPw::SOUND_FILTER[MAX_SOUND_FILTER][SOUND_FILTER_ORDER+4] = {
    {350,254,15,-1288,-49,-49,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-49,-48,-47,-46,-45,-44,-43,-41,-40,-38,-36,-34,-32,-30,-28,-26,-23,-21,-18,-15,-12,-10,-6,-3,2,4,8,12,16,20,24,28,32,37,41,46,51,56,60,66,71,76,81,86,92,97,103,108,114,120,125,131,137,143,149,154,160,166,172,178,184,190,196,202,208,214,220,226,231,237,243,248,254,260,265,270,276,281,286,291,296,301,306,310,315,319,323,328,332,335,339,343,346,350,353,356,359,361,364,366,368,370,372,374,375,377,378,379,380,381,381,381,381,381,381,381,380,379,378,377,375,374,372,370,368,366,364,361,359,356,353,350,346,343,339,335,332,328,323,319,315,310,306,301,296,291,286,281,276,270,265,260,254,248,243,237,231,226,220,214,208,202,196,190,184,178,172,166,160,154,149,143,137,131,125,120,114,108,103,97,92,86,81,76,71,66,60,56,51,46,41,37,32,28,24,20,16,12,8,4,2,-3,-6,-10,-12,-15,-18,-21,-23,-26,-28,-30,-32,-34,-36,-38,-40,-41,-43,-44,-45,-46,-47,-48,-49,-50,-50,-51,-51,-51,-51,-51,-51,-51,-51,-50,-50,-49,-49,-1288},
    {500,254,15,568,-49,-47,-46,-44,-44,-43,-43,-43,-43,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-55,-56,-58,-59,-61,-62,-64,-65,-66,-68,-69,-70,-70,-71,-72,-72,-72,-73,-72,-72,-71,-71,-70,-69,-67,-66,-64,-62,-60,-57,-54,-51,-47,-44,-40,-35,-31,-26,-21,-15,-10,-4,3,9,16,23,31,38,46,54,63,71,80,89,98,107,117,127,137,147,157,167,177,188,199,209,220,231,241,252,263,273,284,295,305,315,326,336,346,356,365,375,384,393,402,410,418,426,434,441,448,455,461,467,473,478,483,488,492,495,499,502,504,506,507,508,509,509,509,508,507,506,504,502,499,495,492,488,483,478,473,467,461,455,448,441,434,426,418,410,402,393,384,375,365,356,346,336,326,315,305,295,284,273,263,252,241,231,220,209,199,188,177,167,157,147,137,127,117,107,98,89,80,71,63,54,46,38,31,23,16,9,3,-4,-10,-15,-21,-26,-31,-35,-40,-44,-47,-51,-54,-57,-60,-62,-64,-66,-67,-69,-70,-71,-71,-72,-72,-73,-72,-72,-72,-71,-70,-70,-69,-68,-66,-65,-64,-62,-61,-59,-58,-56,-55,-53,-52,-50,-49,-48,-47,-46,-45,-44,-43,-43,-43,-43,-43,-44,-44,-46,-47,-49,568},
    {750,254,15,-485,2,2,3,4,6,7,9,11,14,16,19,22,25,29,32,35,39,43,46,50,53,56,59,62,65,68,70,72,73,74,75,76,75,75,74,72,70,67,65,61,56,52,46,41,34,28,20,13,5,-4,-12,-21,-30,-39,-49,-58,-67,-76,-86,-94,-103,-111,-119,-126,-133,-139,-144,-148,-152,-155,-157,-157,-157,-156,-153,-149,-144,-138,-130,-121,-111,-99,-86,-72,-56,-39,-21,-1,19,41,64,88,112,138,165,192,220,248,277,306,336,366,395,425,454,483,512,540,567,594,620,644,668,691,712,732,750,767,783,796,808,819,827,834,839,841,842,841,839,834,827,819,808,796,783,767,750,732,712,691,668,644,620,594,567,540,512,483,454,425,395,366,336,306,277,248,220,192,165,138,112,88,64,41,19,-1,-21,-39,-56,-72,-86,-99,-111,-121,-130,-138,-144,-149,-153,-156,-157,-157,-157,-155,-152,-148,-144,-139,-133,-126,-119,-111,-103,-94,-86,-76,-67,-58,-49,-39,-30,-21,-12,-4,5,13,20,28,34,41,46,52,56,61,65,67,70,72,74,75,75,76,75,74,73,72,70,68,65,62,59,56,53,50,46,43,39,35,32,29,25,22,19,16,14,11,9,7,6,4,3,2,2,-485},
    {1000,254,15,257,15,15,15,14,13,11,9,7,4,1,-3,-6,-10,-14,-18,-23,-27,-32,-36,-40,-44,-48,-51,-54,-56,-58,-59,-60,-60,-59,-58,-56,-53,-49,-44,-39,-33,-27,-19,-12,-4,5,14,23,32,41,50,59,67,75,82,89,94,99,102,105,106,106,104,101,96,90,83,74,63,51,38,24,9,-7,-24,-41,-59,-77,-95,-113,-130,-147,-163,-177,-190,-201,-211,-218,-223,-225,-225,-222,-216,-206,-194,-178,-159,-136,-110,-81,-49,-13,25,66,110,157,205,255,307,360,413,468,522,577,631,684,735,785,833,879,921,961,998,1030,1059,1084,1105,1121,1133,1140,1142,1140,1133,1121,1105,1084,1059,1030,998,961,921,879,833,785,735,684,631,577,522,468,413,360,307,255,205,157,110,66,25,-13,-49,-81,-110,-136,-159,-178,-194,-206,-216,-222,-225,-225,-223,-218,-211,-201,-190,-177,-163,-147,-130,-113,-95,-77,-59,-41,-24,-7,9,24,38,51,63,74,83,90,96,101,104,106,106,105,102,99,94,89,82,75,67,59,50,41,32,23,14,5,-4,-12,-19,-27,-33,-39,-44,-49,-53,-56,-58,-59,-60,-60,-59,-58,-56,-54,-51,-48,-44,-40,-36,-32,-27,-23,-18,-14,-10,-6,-3,1,4,7,9,11,13,14,15,15,15,257},
    {1500,254,15,-78,54,42,34,30,27,25,24,23,21,19,17,14,10,6,2,-3,-8,-13,-18,-23,-27,-31,-35,-37,-38,-39,-38,-36,-33,-28,-22,-16,-8,0,9,18,27,36,44,52,58,63,66,67,67,64,60,53,44,34,22,8,-6,-21,-37,-52,-66,-79,-91,-100,-107,-111,-112,-110,-104,-95,-83,-67,-49,-28,-4,20,45,71,96,119,140,159,173,183,189,189,184,172,155,132,104,70,32,-9,-53,-98,-144,-188,-231,-269,-303,-330,-349,-359,-360,-349,-327,-293,-247,-188,-118,-36,57,160,272,390,514,642,771,900,1027,1150,1266,1373,1471,1556,1628,1686,1727,1753,1761,1753,1727,1686,1628,1556,1471,1373,1266,1150,1027,900,771,642,514,390,272,160,57,-36,-118,-188,-247,-293,-327,-349,-360,-359,-349,-330,-303,-269,-231,-188,-144,-98,-53,-9,32,70,104,132,155,172,184,189,189,183,173,159,140,119,96,71,45,20,-4,-28,-49,-67,-83,-95,-104,-110,-112,-111,-107,-100,-91,-79,-66,-52,-37,-21,-6,8,22,34,44,53,60,64,67,67,66,63,58,52,44,36,27,18,9,0,-8,-16,-22,-28,-33,-36,-38,-39,-38,-37,-35,-31,-27,-23,-18,-13,-8,-3,2,6,10,14,17,19,21,23,24,25,27,30,34,42,54,-78},
    {2000,254,15,-62,0,1,3,5,8,10,13,16,18,20,21,21,20,18,15,11,7,1,-5,-11,-17,-22,-26,-29,-31,-31,-29,-25,-20,-13,-4,5,14,24,33,40,46,50,51,50,45,38,28,16,3,-12,-27,-41,-54,-65,-73,-77,-77,-73,-65,-53,-36,-17,4,27,49,70,88,103,112,117,115,106,91,70,44,14,-18,-52,-85,-115,-141,-160,-172,-175,-169,-153,-127,-93,-52,-4,47,98,148,193,231,258,274,275,261,231,187,128,57,-23,-109,-196,-281,-359,-424,-472,-499,-500,-474,-417,-329,-210,-61,116,316,535,768,1008,1248,1482,1702,1901,2074,2214,2318,2381,2403,2381,2318,2214,2074,1901,1702,1482,1248,1008,768,535,316,116,-61,-210,-329,-417,-474,-500,-499,-472,-424,-359,-281,-196,-109,-23,57,128,187,231,261,275,274,258,231,193,148,98,47,-4,-52,-93,-127,-153,-169,-175,-172,-160,-141,-115,-85,-52,-18,14,44,70,91,106,115,117,112,103,88,70,49,27,4,-17,-36,-53,-65,-73,-77,-77,-73,-65,-54,-41,-27,-12,3,16,28,38,45,50,51,50,46,40,33,24,14,5,-4,-13,-20,-25,-29,-31,-31,-29,-26,-22,-17,-11,-5,1,7,11,15,18,20,21,21,20,18,16,13,10,8,5,3,1,0,-62},
    {2500,254,15,46,-29,-24,-22,-20,-19,-17,-15,-11,-7,-2,4,9,14,18,21,22,21,18,13,7,-1,-9,-17,-25,-30,-33,-33,-30,-24,-16,-5,6,18,30,39,45,48 ,47,41,31,17,1,-16,-32,-47,-59,-66,-67,-63,-52,-36,-16,7,31,53,72,86,92,91,81,64,39,10,-22,-54,-84,-107,-122,-127,-121,-103,-75,-39,3,48,91,128,156,172,173,159,129,86,32,-28,-90,-148,-196,-230,-246,-240,-212,-163,-95,-14,76,165,247,313,356,371,352,300,215,102,-32,-178,-325,-459,-566,-636,-655,-616,-512,-342,-107,187,529,906,1301,1696,2072,2411,2695,2909,3042,3087,3042,2909,2695,2411,2072,1696,1301,906,529,187,-107,-342,-512,-616,-655,-636,-566,-459,-325,-178,-32,102,215,300,352,371,356,313,247,165,76,-14,-95,-163,-212,-240,-246,-230,-196,-148,-90,-28,32,86,129,159,173,172,156,128,91,48,3,-39,-75,-103,-121,-127,-122,-107,-84,-54,-22,10,39,64,81,91,92,86,72,53,31,7,-16,-36,-52,-63,-67,-66,-59,-47,-32,-16,1,17,31,41,47,48,45,39,30,18,6,-5,-16,-24,-30,-33,-33,-30,-25,-17,-9,-1,7,13,18,21,22,21,18,14,9,4,-2,-7,-11,-15,-17,-19,-20,-22,-24,-29,46},
    {3000,254,15,19,61,-3,14,5,2,-4,-9,-14,-17,-18,-16,-13,-7,0,8,16,21,25,25,22,16,7,-4,-15,-24,-32,-35,-34,-28,-18,-5,10,24,36,44,47,44,34,19,1,-19,-37,-52,-61,-62,-54,-39,-18,7,32,55,72,80,78,66,43,14,-19,-51,-79,-98,-104,-98,-77,-45,-5,37,78,111,130,134,120,89,44,-10,-65,-115,-153,-173,-171,-145,-99,-37,35,106,168,212,230,219,177,109,21,-77,-171,-249,-300,-315,-288,-220,-117,12,150,281,387,450,459,406,291,122,-84,-306,-517,-688,-789,-797,-693,-469,-126,322,853,1433,2024,2583,3070,3447,3686,3768,3686,3447,3070,2583,2024,1433,853,322,-126,-469,-693,-797,-789,-688,-517,-306,-84,122,291,406,459,450,387,281,150,12,-117,-220,-288,-315,-300,-249,-171,-77,21,109,177,219,230,212,168,106,35,-37,-99,-145,-171,-173,-153,-115,-65,-10,44,89,120,134,130,111,78,37,-5,-45,-77,-98,-104,-98,-79,-51,-19,14,43,66,78,80,72,55,32,7,-18,-39,-54,-62,-61,-52,-37,-19,1,19,34,44,47,44,36,24,10,-5,-18,-28,-34,-35,-32,-24,-15,-4,7,16,22,25,25,21,16,8,0,-7,-13,-16,-18,-17,-14,-9,-4,2,5,14,-3,61,19},
    {3500,254,15,-9,13,9,8,6,4,2,-1,-4,-7,-9,-9,-8,-5,-1,4,9,13,14,13,10,5,-2,-10,-16,-20,-21,-18,-11,-2,9,18,26,29,28,21,10,-4,-19,-31,-38,-40,-34,-22,-4,15,33,47,54,51,39,19,-6,-32,-54,-68,-70,-61,-39,-9,24,56,80,92,88,67,34,-8,-52,-89,-113,-119,-103,-68,-18,38,92,133,153,147,115,59,-11,-84,-147,-189,-200,-176,-119,-36,60,152,225,262,256,203,109,-12,-142,-257,-337,-363,-326,-226,-75,105,286,435,522,523,430,244,-14,-308,-592,-815,-926,-884,-663,-255,321,1028,1808,2589,3298,3864,4229,4355,4229,3864,3298,2589,1808,1028,321,-255,-663,-884,-926,-815,-592,-308,-14,244,430,523,522,435,286,105,-75,-226,-326,-363,-337,-257,-142,-12,109,203,256,262,225,152,60,-36,-119,-176,-200,-189,-147,-84,-11,59,115,147,153,133,92,38,-18,-68,-103,-119,-113,-89,-52,-8,34,67,88,92,80,56,24,-9,-39,-61,-70,-68,-54,-32,-6,19,39,51,54,47,33,15,-4,-22,-34,-40,-38,-31,-19,-4,10,21,28,29,26,18,9,-2,-11,-18,-21,-20,-16,-10,-2,5,10,13,14,13,9,4,-1,-5,-8,-9,-9,-7,-4,-1,2,4,6,8,9,13,-9},
    {4000,254,15,-7,-26,-1,-5,0,3,7,9,9,7,3,-2,-8,-12,-14,-12,-7,0,8,14,18,18,14,5,-5,-16,-23,-25,-22,-13,0,14,26,33,32,23,8,-10,-27,-39,-43,-36,-20,2,25,44,54,51,36,11,-18,-46,-64,-68,-56,-30,6,42,71,84,79,54,14,-31,-73,-99,-104,-84,-42,12,67,110,129,119,79,18,-52,-114,-153,-158,-125,-60,24,108,172,199,180,117,20,-88,-183,-242,-246,-192,-87,47,181,282,324,291,184,23,-159,-320,-418,-425,-329,-142,103,351,545,630,570,359,24,-375,-755,-1020,-1081,-876,-378,390,1361,2425,3451,4304,4869,5066,4869,4304,3451,2425,1361,390,-378,-876,-1081,-1020,-755,-375,24,359,570,630,545,351,103,-142,-329,-425,-418,-320,-159,23,184,291,324,282,181,47,-87,-192,-246,-242,-183,-88,20,117,180,199,172,108,24,-60,-125,-158,-153,-114,-52,18,79,119,129,110,67,12,-42,-84,-104,-99,-73,-31,14,54,79,84,71,42,6,-30,-56,-68,-64,-46,-18,11,36,51,54,44,25,2,-20,-36,-43,-39,-27,-10,8,23,32,33,26,14,0,-13,-22,-25,-23,-16,-5,5,14,18,18,14,8,0,-7,-12,-14,-12,-8,-2,3,7,9,9,7,3,0,-5,-1,-26,-7},
    {4500,254,15,17,-6,-8,-9,-10,-9,-6,-1,4,8,9,8,4,-2,-8,-13,-14,-10,-4,5,13,18,17,12,2,-10,-19,-24,-21,-12,2,17,27,31,25,10,-8,-26,-37,-38,-27,-7,17,37,48,44,27,0,-29,-51,-60,-50,-25,10,45,68,72,54,19,-25,-64,-87,-84,-55,-8,46,89,108,95,52,-9,-72,-117,-130,-103,-44,34,106,151,153,108,27,-68,-149,-190,-176,-107,0,115,203,235,198,98,-41,-178,-272,-289,-219,-76,104,267,363,356,237,33,-202,-400,-495,-447,-253,46,371,624,718,597,264,-218,-728,-1115,-1230,-962,-271,796,2105,3462,4645,5449,5735,5449,4645,3462,2105,796,-271,-962,-1230,-1115,-728,-218,264,597,718,624,371,46,-253,-447,-495,-400,-202,33,237,356,363,267,104,-76,-219,-289,-272,-178,-41,98,198,235,203,115,0,-107,-176,-190,-149,-68,27,108,153,151,106,34,-44,-103,-130,-117,-72,-9,52,95,108,89,46,-8,-55,-84,-87,-64,-25,19,54,72,68,45,10,-25,-50,-60,-51,-29,0,27,44,48,37,17,-7,-27,-38,-37,-26,-8,10,25,31,27,17,2,-12,-21,-24,-19,-10,2,12,17,18,13,5,-4,-10,-14,-13,-8,-2,4,8,9,8,4,-1,-6,-9,-10,-9,-8,-6,17},
    //{5000,63,12,-8,-31,-7,-8,3,14,23,25,19,5,-14,-33,-43,-41,-24,6,40,67,77,62,21,-37,-98,-141,-146,-97,7,159,337,512,650,727,727,650,512,337,159,7,-97,-146,-141,-98,-37,21,62,77,67,40,6,-24,-41,-43,-33,-14,5,19,25,23,14,3,-8,-7,-31,-8},
    {5000,254,15,-15,23,16,11,7,1,-5,-10,-10,-7,0,7,13,14,10,1,-8,-16,-18,-13,-3,10,19,23,17,5,-11,-23,-28,-22,-7,12,28,34,28,11,-12,-33,-42,-35,-15,13,38,50,44,21,-12,-43,-59,-54,-28,11,49,70,66,36,-9,-54,-82,-80,-47,6,60,95,95,60,-1,-66,-110,-114,-75,-5,72,126,136,94,14,-77,-145,-162,-118,-25,83,167,193,146,41,-88,-192,-230,-183,-61,93,223,278,230,89,-97,-262,-339,-293,-129,101,313,425,383,187,-104,-388,-553,-522,-281,106,510,774,773,459,-108,-759,-1260,-1372,-927,109,1617,3335,4923,6041,6444,6041,4923,3335,1617,109,-927,-1372,-1260,-759,-108,459,773,774,510,106,-281,-522,-553,-388,-104,187,383,425,313,101,-129,-293,-339,-262,-97,89,230,278,223,93,-61,-183,-230,-192,-88,41,146,193,167,83,-25,-118,-162,-145,-77,14,94,136,126,72,-5,-75,-114,-110,-66,-1,60,95,95,60,6,-47,-80,-82,-54,-9,36,66,70,49,11,-28,-54,-59,-43,-12,21,44,50,38,13,-15,-35,-42,-33,-12,11,28,34,28,12,-7,-22,-28,-23,-11,5,17,23,19,10,-3,-13,-18,-16,-8,1,10,14,13,7,0,-7,-10,-10,-5,1,7,11,16,23,-15},
    {5500,254,15,-9,-20,3,-2,6,7,7,3,-3,-8,-10,-7,0,7,12,12,6,-3,-13,-17,-13,-3,9,19,20,12,-2,-17,-25,-22,-8,11,26,31,21,1,-21,-36,-35,-17,10,34,45,35,8,-25,-49,-51,-30,6,43,62,54,20,-26,-63,-73,-50,-2,51,83,79,38,-23,-79,-101,-78,-17,56,108,113,66,-15,-95,-136,-116,-42,58,137,158,107,3,-110,-180,-171,-81,52,172,219,169,35,-125,-239,-250,-145,36,215,309,266,94,-137,-325,-378,-257,-3,279,459,442,212,-147,-481,-630,-496,-102,405,803,881,538,-153,-943,-1477,-1416,-564,1033,3082,5104,6584,7127,6584,5104,3082,1033,-564,-1416,-1477,-943,-153,538,881,803,405,-102,-496,-630,-481,-147,212,442,459,279,-3,-257,-378,-325,-137,94,266,309,215,36,-145,-250,-239,-125,35,169,219,172,52,-81,-171,-180,-110,3,107,158,137,58,-42,-116,-136,-95,-15,66,113,108,56,-17,-78,-101,-79,-23,38,79,83,51,-2,-50,-73,-63,-26,20,54,62,43,6,-30,-51,-49,-25,8,35,45,34,10,-17,-35,-36,-21,1,21,31,26,11,-8,-22,-25,-17,-2,12,20,19,9,-3,-13,-17,-13,-3,6,12,12,7,0,-7,-10,-8,-3,3,7,7,6,-2,3,-20,-9},
    {6000,254,15,59,3,-5,-13,-18,-15,-6,6,13,11,1,-12,-22,-21,-11,6,19,21,10,-9,-25,-30,-19,2,23,31,22,-1,-26,-39,-31,-6,23,41,36,10,-24,-48,-47,-20,19,50,54,28,-16,-54,-65,-40,8,54,73,51,0,-56,-83,-66,-11,53,91,81,24,-49,-100,-98,-41,42,106,115,60,-32,-112,-134,-83,18,115,153,108,0,-115,-173,-138,-23,112,192,171,52,-104,-212,-209,-88,91,231,251,132,-71,-249,-301,-187,42,266,359,257,0,-281,-430,-349,-60,295,521,474,148,-306,-647,-662,-291,316,848,982,554,-322,-1252,-1702,-1223,326,2677,5203,7139,7864,7139,5203,2677,326,-1223,-1702,-1252,-322,554,982,848,316,-291,-662,-647,-306,148,474,521,295,-60,-349,-430,-281,0,257,359,266,42,-187,-301,-249,-71,132,251,231,91,-88,-209,-212,-104,52,171,192,112,-23,-138,-173,-115,0,108,153,115,18,-83,-134,-112,-32,60,115,106,42,-41,-98,-100,-49,24,81,91,53,-11,-66,-83,-56,0,51,73,54,8,-40,-65,-54,-16,28,54,50,19,-20,-47,-48,-24,10,36,41,23,-6,-31,-39,-26,-1,22,31,23,2,-19,-30,-25,-9,10,21,19,6,-11,-21,-22,-12,1,11,13,6,-6,-15,-18,-13,-5,3,59},
    {6500,254,15,-2,23,6,1,-4,-8,-6,0,6,10,7,-1,-9,-12,-8,2,12,15,8,-5,-16,-17,-8,8,20,20,7,-12,-25,-23,-6,16,30,25,3,-22,-36,-27,0,29,42,28,-5,-37,-48,-28,11,46,54,27,-19,-57,-60,-25,29,68,66,21,-41,-81,-71,-15,55,94,75,7,-71,-108,-78,5,90,123,79,-19,-112,-138,-78,37,136,154,73,-60,-164,-169,-66,88,196,185,53,-123,-232,-200,-35,165,274,214,10,-218,-323,-227,26,285,382,239,-75,-373,-457,-250,147,495,558,259,-257,-678,-710,-266,444,994,979,271,-837,-1709,-1651,-274,2254,5205,7567,8467,7567,5205,2254,-274,-1651,-1709,-837,271,979,994,444,-266,-710,-678,-257,259,558,495,147,-250,-457,-373,-75,239,382,285,26,-227,-323,-218,10,214,274,165,-35,-200,-232,-123,53,185,196,88,-66,-169,-164,-60,73,154,136,37,-78,-138,-112,-19,79,123,90,5,-78,-108,-71,7,75,94,55,-15,-71,-81,-41,21,66,68,29,-25,-60,-57,-19,27,54,46,11,-28,-48,-37,-5,28,42,29,0,-27,-36,-22,3,25,30,16,-6,-23,-25,-12,7,20,20,8,-8,-17,-16,-5,8,15,12,2,-8,-12,-9,-1,7,10,6,0,-6,-8,-4,1,6,23,-2},
    {7000,254,15,-24,-12,6,2,12,0,-1,-12,-6,-3,10,11,8,-5,-13,-14,-3,10,18,12,-3,-18,-20,-7,12,24,19,-1,-22,-28,-13,13,32,28,3,-26,-38,-22,12,40,39,10,-30,-50,-34,9,48,54,20,-32,-63,-49,2,56,71,34,-31,-77,-69,-8,63,91,53,-27,-93,-93,-24,68,115,79,-19,-109,-123,-46,70,142,112,-4,-125,-160,-78,68,174,156,20,-140,-207,-123,59,210,214,58,-155,-267,-187,40,256,295,116,-167,-349,-282,5,316,417,211,-178,-474,-441,-65,409,631,394,-186,-714,-771,-228,610,1146,882,-191,-1464,-1977,-954,1678,5121,8033,9170,8033,5121,1678,-954,-1977,-1464,-191,882,1146,610,-228,-771,-714,-186,394,631,409,-65,-441,-474,-178,211,417,316,5,-282,-349,-167,116,295,256,40,-187,-267,-155,58,214,210,59,-123,-207,-140,20,156,174,68,-78,-160,-125,-4,112,142,70,-46,-123,-109,-19,79,115,68,-24,-93,-93,-27,53,91,63,-8,-69,-77,-31,34,71,56,2,-49,-63,-32,20,54,48,9,-34,-50,-30,10,39,40,12,-22,-38,-26,3,28,32,13,-13,-28,-22,-1,19,24,12,-7,-20,-18,-3,12,18,10,-3,-14,-13,-5,8,11,10,-3,-6,-12,-1,0,12,2,6,-12,-24},
    {7500,254,15,14,-18,-15,-10,-1,6,8,2,-7,-11,-5,5,12,10,-2,-13,-14,-3,12,18,9,-9,-20,-15,3,21,22,4,-19,-28,-13,14,31,23,-6,-32,-33,-6,29,41,19,-21,-46,-34,9,47,48,7,-42,-59,-26,31,66,47,-14,-67,-67,-9,61,83,36,-45,-93,-64,21,95,92,10,-85,-115,-48,64,129,88,-32,-132,-126,-12,120,159,64,-92,-180,-120,47,185,175,14,-171,-222,-87,134,256,168,-72,-269,-250,-15,253,326,123,-205,-386,-250,117,420,390,16,-416,-535,-198,358,676,441,-227,-807,-765,-16,919,1235,473,-1004,-2080,-1543,1057,4952,8447,9847,8447,4952,1057,-1543,-2080,-1004,473,1235,919,-16,-765,-807,-227,441,676,358,-198,-535,-416,16,390,420,117,-250,-386,-205,123,326,253,-15,-250,-269,-72,168,256,134,-87,-222,-171,14,175,185,47,-120,-180,-92,64,159,120,-12,-126,-132,-32,88,129,64,-48,-115,-85,10,92,95,21,-64,-93,-45,36,83,61,-9,-67,-67,-14,47,66,31,-26,-59,-42,7,48,47,9,-34,-46,-21,19,41,29,-6,-33,-32,-6,23,31,14,-13,-28,-19,4,22,21,3,-15,-20,-9,9,18,12,-3,-14,-13,-2,10,12,5,-5,-11,-7,2,8,6,-1,-10,-15,-18,14},
    {8000,254,15,-1,32,5,-3,-9,-6,2,10,8,-2,-11,-11,0,12,13,1,-13,-16,-3,14,19,6,-14,-23,-10,14,26,14,-13,-29,-18,12,33,23,-10,-36,-29,6,39,36,-2,-41,-43,-3,42,50,9,-43,-58,-17,43,65,26,-41,-73,-36,38,81,48,-34,-88,-61,27,95,75,-19,-101,-90,8,105,107,5,-109,-124,-21,110,143,40,-109,-162,-62,105,181,87,-98,-201,-116,88,221,149,-73,-241,-187,53,260,230,-27,-279,-279,-7,297,337,50,-313,-404,-106,329,487,180,-342,-590,-281,354,728,425,-364,-928,-648,372,1260,1053,-378,-1961,-2039,382,4693,8835,10540,8835,4693,382,-2039,-1961,-378,1053,1260,372,-648,-928,-364,425,728,354,-281,-590,-342,180,487,329,-106,-404,-313,50,337,297,-7,-279,-279,-27,230,260,53,-187,-241,-73,149,221,88,-116,-201,-98,87,181,105,-62,-162,-109,40,143,110,-21,-124,-109,5,107,105,8,-90,-101,-19,75,95,27,-61,-88,-34,48,81,38,-36,-73,-41,26,65,43,-17,-58,-43,9,50,42,-3,-43,-41,-2,36,39,6,-29,-36,-10,23,33,12,-18,-29,-13,14,26,14,-10,-23,-14,6,19,14,-3,-16,-13,1,13,12,0,-11,-11,-2,8,10,2,-6,-9,-3,5,32,-1},
    {8500,254,15,-23,3,9,11,5,-3,-6,1,10,12,2,-9,-10,1,13,13,-1,-14,-13,3,18,15,-5,-21,-15,8,24,16,-11,-28,-16,15,32,16,-19,-36,-15,24,40,14,-29,-44,-11,36,48,9,-43,-51,-5,50,55,0,-59,-58,6,68,60,-13,-77,-62,21,88,63,-31,-98,-63,43,110,62,-56,-121,-60,71,133,55,-88,-146,-49,107,158,41,-128,-170,-31,152,183,17,-179,-195,0,209,207,-21,-244,-218,47,283,229,-80,-328,-239,120,381,249,-171,-445,-257,236,525,265,-324,-630,-272,447,775,277,-633,-999,-282,952,1401,285,-1641,-2383,-287,4364,9172,11210,9172,4364,-287,-2383,-1641,285,1401,952,-282,-999,-633,277,775,447,-272,-630,-324,265,525,236,-257,-445,-171,249,381,120,-239,-328,-80,229,283,47,-218,-244,-21,207,209,0,-195,-179,17,183,152,-31,-170,-128,41,158,107,-49,-146,-88,55,133,71,-60,-121,-56,62,110,43,-63,-98,-31,63,88,21,-62,-77,-13,60,68,6,-58,-59,0,55,50,-5,-51,-43,9,48,36,-11,-44,-29,14,40,24,-15,-36,-19,16,32,15,-16,-28,-11,16,24,8,-15,-21,-5,15,18,3,-13,-14,-1,13,13,1,-10,-9,2,12,10,1,-6,-3,5,11,9,3,-23},
    {9000,254,15,15,-26,-17,-6,5,8,-1,-10,-8,4,13,7,-8,-15,-4,13,15,-1,-17,-14,7,21,11,-14,-24,-6,21,25,-1,-28,-23,10,34,18,-21,-38,-10,32,38,-2,-42,-35,16,51,27,-31,-56,-15,47,56,-2,-62,-51,22,74,39,-45,-81,-21,68,81,-3,-89,-73,32,105,57,-63,-115,-31,96,115,-3,-125,-104,44,149,81,-89,-163,-45,136,165,-4,-179,-150,62,215,118,-129,-237,-66,198,242,-4,-265,-225,92,323,180,-195,-367,-105,310,386,-4,-431,-374,152,553,317,-346,-670,-201,598,776,-4,-940,-865,369,1467,932,-1128,-2576,-974,3942,9485,11911,9485,3942,-974,-2576,-1128,932,1467,369,-865,-940,-4,776,598,-201,-670,-346,317,553,152,-374,-431,-4,386,310,-105,-367,-195,180,323,92,-225,-265,-4,242,198,-66,-237,-129,118,215,62,-150,-179,-4,165,136,-45,-163,-89,81,149,44,-104,-125,-3,115,96,-31,-115,-63,57,105,32,-73,-89,-3,81,68,-21,-81,-45,39,74,22,-51,-62,-2,56,47,-15,-56,-31,27,51,16,-35,-42,-2,38,32,-10,-38,-21,18,34,10,-23,-28,-1,25,21,-6,-24,-14,11,21,7,-14,-17,-1,15,13,-4,-15,-8,7,13,4,-8,-10,-1,8,5,-6,-17,-26,15},
    {9500,254,15,5,35,-2,-7,-7,3,11,4,-8,-11,1,13,9,-8,-16,-3,15,14,-6,-20,-8,16,21,-2,-24,-16,14,28,5,-26,-25,10,34,15,-26,-35,2,40,27,-23,-46,-9,43,41,-16,-55,-24,42,56,-3,-62,-42,36,71,14,-66,-63,24,85,37,-63,-86,4,95,65,-53,-108,-23,99,97,-34,-128,-57,95,130,-5,-143,-99,79,164,36,-149,-148,51,195,89,-143,-200,6,219,155,-121,-256,-58,233,235,-78,-312,-146,231,330,-7,-365,-265,204,444,107,-414,-430,140,590,288,-455,-679,7,802,615,-485,-1139,-303,1223,1421,-505,-2585,-1608,3462,9749,12596,9749,3462,-1608,-2585,-505,1421,1223,-303,-1139,-485,615,802,7,-679,-455,288,590,140,-430,-414,107,444,204,-265,-365,-7,330,231,-146,-312,-78,235,233,-58,-256,-121,155,219,6,-200,-143,89,195,51,-148,-149,36,164,79,-99,-143,-5,130,95,-57,-128,-34,97,99,-23,-108,-53,65,95,4,-86,-63,37,85,24,-63,-66,14,71,36,-42,-62,-3,56,42,-24,-55,-16,41,43,-9,-46,-23,27,40,2,-35,-26,15,34,10,-25,-26,5,28,14,-16,-24,-2,21,16,-8,-20,-6,14,15,-3,-16,-8,9,13,1,-11,-8,4,11,3,-7,-7,-2,35,5},
    {10000,254,15,-23,8,14,10,-1,-5,3,12,8,-6,-10,2,14,7,-10,-13,3,17,7,-14,-16,6,22,7,-19,-19,9,27,7,-25,-23,13,32,6,-31,-26,18,39,4,-39,-29,25,46,1,-49,-31,33,54,-3,-59,-33,44,62,-9,-72,-34,56,70,-17,-85,-34,71,79,-27,-101,-32,88,88,-40,-118,-29,109,97,-57,-138,-23,133,106,-78,-160,-15,162,115,-104,-186,-2,198,123,-137,-216,15,241,131,-180,-251,40,296,138,-237,-295,76,369,144,-316,-353,129,471,149,-433,-438,214,631,153,-629,-578,368,925,156,-1033,-882,738,1688,158,-2422,-2168,2934,9967,13266,9967,2934,-2168,-2422,158,1688,738,-882,-1033,156,925,368,-578,-629,153,631,214,-438,-433,149,471,129,-353,-316,144,369,76,-295,-237,138,296,40,-251,-180,131,241,15,-216,-137,123,198,-2,-186,-104,115,162,-15,-160,-78,106,133,-23,-138,-57,97,109,-29,-118,-40,88,88,-32,-101,-27,79,71,-34,-85,-17,70,56,-34,-72,-9,62,44,-33,-59,-3,54,33,-31,-49,1,46,25,-29,-39,4,39,18,-26,-31,6,32,13,-23,-25,7,27,9,-19,-19,7,22,6,-16,-14,7,17,3,-13,-10,7,14,2,-10,-6,8,12,3,-5,-1,10,14,8,-23},
    {10200,254,15,23,-4,-11,-9,1,5,-3,-12,-7,6,8,-5,-14,-5,11,10,-8,-17,-2,17,10,-13,-19,3,22,9,-20,-21,9,28,6,-28,-22,18,33,0,-36,-20,28,37,-9,-45,-15,40,39,-21,-54,-7,54,38,-37,-61,5,68,33,-55,-65,22,82,22,-76,-66,44,95,6,-98,-61,70,104,-17,-121,-49,101,109,-47,-143,-29,136,107,-86,-162,1,174,96,-133,-177,43,214,73,-189,-184,100,254,35,-254,-181,174,293,-23,-332,-162,271,330,-111,-425,-119,403,362,-243,-545,-39,596,389,-460,-721,118,926,409,-891,-1056,497,1727,422,-2311,-2370,2710,10042,13533,10042,2710,-2370,-2311,422,1727,497,-1056,-891,409,926,118,-721,-460,389,596,-39,-545,-243,362,403,-119,-425,-111,330,271,-162,-332,-23,293,174,-181,-254,35,254,100,-184,-189,73,214,43,-177,-133,96,174,1,-162,-86,107,136,-29,-143,-47,109,101,-49,-121,-17,104,70,-61,-98,6,95,44,-66,-76,22,82,22,-65,-55,33,68,5,-61,-37,38,54,-7,-54,-21,39,40,-15,-45,-9,37,28,-20,-36,0,33,18,-22,-28,6,28,9,-21,-20,9,22,3,-19,-13,10,17,-2,-17,-8,10,11,-5,-14,-5,8,6,-7,-12,-3,5,1,-9,-11,-4,23},
    {10500,254,15,3,-24,-5,5,6,-3,-8,-1,9,5,-7,-10,4,13,2,-13,-9,10,15,-4,-18,-5,18,14,-13,-21,4,25,8,-23,-20,15,29,-3,-33,-13,29,28,-18,-40,0,43,20,-36,-39,20,52,3,-54,-30,44,53,-21,-68,-10,68,43,-52,-71,21,86,19,-83,-60,60,93,-20,-109,-31,101,82,-69,-121,15,136,49,-122,-111,77,156,-7,-170,-74,146,150,-84,-201,-7,213,110,-176,-203,91,263,29,-270,-162,214,280,-97,-352,-65,353,244,-270,-401,102,496,130,-492,-390,365,628,-106,-783,-272,792,734,-592,-1233,108,1708,803,-2101,-2646,2359,10143,13935,10143,2359,-2646,-2101,803,1708,108,-1233,-592,734,792,-272,-783,-106,628,365,-390,-492,130,496,102,-401,-270,244,353,-65,-352,-97,280,214,-162,-270,29,263,91,-203,-176,110,213,-7,-201,-84,150,146,-74,-170,-7,156,77,-111,-122,49,136,15,-121,-69,82,101,-31,-109,-20,93,60,-60,-83,19,86,21,-71,-52,43,68,-10,-68,-21,53,44,-30,-54,3,52,20,-39,-36,20,43,0,-40,-18,28,29,-13,-33,-3,29,15,-20,-23,8,25,4,-21,-13,14,18,-5,-18,-4,15,10,-9,-13,2,13,4,-10,-7,5,9,-1,-8,-3,6,5,-5,-24,3},
    {11000,254,15,13,27,-13,-4,0,10,1,-10,-5,9,9,-7,-13,4,15,1,-16,-7,15,13,-12,-19,7,23,0,-25,-9,24,18,-19,-26,12,33,-2,-36,-11,35,24,-30,-36,19,45,-5,-50,-12,50,30,-43,-47,30,61,-11,-69,-12,70,36,-62,-60,45,80,-21,-92,-10,95,43,-87,-76,66,104,-35,-122,-5,129,50,-120,-94,96,134,-56,-162,4,174,56,-167,-117,138,173,-88,-216,20,239,61,-236,-148,203,230,-140,-297,48,340,66,-347,-193,313,322,-232,-438,104,526,69,-568,-281,548,520,-449,-773,252,1025,72,-1260,-574,1462,1391,-1617,-3043,1715,10283,14636,10283,1715,-3043,-1617,1391,1462,-574,-1260,72,1025,252,-773,-449,520,548,-281,-568,69,526,104,-438,-232,322,313,-193,-347,66,340,48,-297,-140,230,203,-148,-236,61,239,20,-216,-88,173,138,-117,-167,56,174,4,-162,-56,134,96,-94,-120,50,129,-5,-122,-35,104,66,-76,-87,43,95,-10,-92,-21,80,45,-60,-62,36,70,-12,-69,-11,61,30,-47,-43,30,50,-12,-50,-5,45,19,-36,-30,24,35,-11,-36,-2,33,12,-26,-19,18,24,-9,-25,0,23,7,-19,-12,13,15,-7,-16,1,15,4,-13,-7,9,9,-5,-10,1,10,0,-4,-13,27,13},
};

#else
const unsigned short CalcPw::SOUND_FILTER[MAX_SOUND_FILTER][16] = {
    { 0, -5, 11, -17, 16, 0, -34, 76, -104, 87, 0, -163, 377, -596, 759, 3278},//<=2000
    {-7, 1, 10, -15, -3, 39, -40, -30, 110, -72, -118, 272, -99, -483, 1170, 2626},//2500
    { 0, -8, 3, 17, -11, -35, 34, 60, -82, -87, 174, 113, -378, -130, 1285, 2187},//3000
    {3, 8, -2, -18, -2, 39, 20, -70, -64, 107, 157, -141, -364, 166, 1276, 1868},//3500
    {0, -8, -7, 11, 26, 0, -55, -47, 65, 141, 0, -263, -233, 369, 1230, 1642},//4000
    {-6, 1, 11, 14, -8, -40, -34, 38, 110, 60, -129, -268, -82, 493, 1160, 1457},//4500
    {4, 8, 6, -9, -27, -24, 21, 79, 75, -37, -190, -212, 50, 565, 1087, 1307},//5000
    {6, 2, -8, -18, -16, 11, 54, 69, 12, -106, -199, -136, 154, 605, 1022, 1191},//5500
    {0, -6, -12, -11, 6, 35, 55, 33, -45, -141, -174, -58, 234, 624, 961, 1095},//6000
    {-6, -8, -7, 3, 22, 40, 36, -8, -84, -148, -134, 13, 291, 628, 904, 1011},//6500
    {-7, -5, 1, 13, 28, 32, 10, -41, -104, -136, -87, 74, 331, 621, 850, 938},//7000
    {-4, 0, 8, 18, 24, 16, -14, -64, -109, -114, -42, 123, 359, 609, 801, 873},//7500
    {0, 5, 11, 17, 16, 0, -34, -76, -104, -87, 0, 162, 376, 594, 757, 818},//8000
};
#endif

CalcPw::CalcPw() {
    m_maxPeriod = 1;
    m_pulseCycle = 1;
}
CalcPw::~CalcPw() {
}

void CalcPw::CalcPwLine(int line) {
    ///> send sv scan line
    m_fpga.SendScanLine(line);
}
void CalcPw::CalcSvPos(int dotBegin, int dotEnd) {
    if (dotBegin > IMG_H)
        dotBegin = IMG_H;
    if (dotEnd > IMG_H)
        dotEnd = IMG_H;

    PRINTF("calc sv pos to fpga: dotBegin = %d, dotEnd = %d\n", dotBegin, dotEnd);
    ///> send sv dot interval
    m_fpga.SendSampleBegin(dotBegin);
    m_fpga.SendSampleEnd(dotEnd);
}

void CalcPw::CalcNoise(int data) {
    m_fpga.SendNoise(data);
}
void CalcPw::CalcGainCw(int dataCw) {
    m_fpga.SendGainCw(dataCw);
}
void CalcPw::CalcDynamicRange(int range) {
    m_fpga.SendDyn(range);
}
void CalcPw::CalcBaseline(int baseline) {
    m_fpga.SendBaseLine(baseline);
}
void CalcPw::CalcLog(int value) {
    m_fpga.SendLogRank(value);
}
void CalcPw::CalcWallFilter(unsigned int *filter, int size) {
    m_fpga.SendWfFc(filter, size);
}
void CalcPw::CalcSpeed(int data) {
    m_fpga.SendSpectrumSpeed(data);
}
void CalcPw::CalcSoundVolume(int data) {
    // send speed
    m_fpga.SendSoundVolume(data);
}

void CalcPw::CalcSoundFilter(int prf) {
#if (defined(EMP_355) || defined(EMP_340))
    int index = 0;
    for (int i = 0; i < MAX_SOUND_FILTER; i++) {
        if (prf == SOUND_FILTER[i][0]) {
            index = i;
            break;
        }
    }
#if 0
    for (int j = 0; j < SOUND_FILTER_ORDER+3; j++)
        printf("*** %d ", *(SOUND_FILTER[index]+1+j));
    printf("\n*** prf = %d, soundFilterIndex = %d\n", prf, index);
#endif
    m_fpga.SendSoundFilter((unsigned short*)(SOUND_FILTER[index]+1),*(SOUND_FILTER[index]+1)+3);
#else
    if (prf > (MAX_SOUND_FILTER-1))
        prf = MAX_SOUND_FILTER-1;

    // send speed filter
    m_fpga.SendSoundFilter((unsigned short*)SOUND_FILTER[prf], 16);
#endif
}

void  CalcPw::CalcColorGray(int index) {

}

void CalcPw::CalcHPRF(int data) {
    m_fpga.SendHPRFEmitNum(data);
}

void CalcPw::CalcColorEmitDelay() {
}
void CalcPw::CalcColorReceiveDelay() {
}

void CalcPw::CalcInvert(bool on) {
    m_fpga.SendSpectrumInvert((int)on);
}

int CalcPw::CalcMaxPeriod(int prf) {
    int maxPeriod = GetMaxPeriod(prf);
    m_fpga.SendMaxPeriod(maxPeriod);

//	PRINTF("================ normal PRFtime = %d\n",maxPeriod+20);

    return prf;
}

void CalcPw::CalcSoundInterpolation(int prf, int spectrumSpeed) {
    //double numIntp =GetMaxPeriod(prfIndex);// 24000 / PW_PRF[prfIndex];
    double MaxPeriod = GetMaxPeriod(prf);

    double numIntp = (MaxPeriod+20)*3/125;
    double numIntp_c = 0;

    if(numIntp < 1.0)
        numIntp = 1.0;
    else if(numIntp > 31.0)
        numIntp = 31.0;

    if(numIntp < 3)
        numIntp_c = 3;
    else
        numIntp_c = numIntp;

#if (defined(EMP_355) || defined(EMP_340))
    CalcSoundFilter(prf);
#else
    CalcSoundFilter((int)numIntp_c - 3);
#endif
    int numAfterP = numIntp * spectrumSpeed;
    unsigned short* coef = (unsigned short*) malloc (numAfterP * sizeof(short));
    PRINTF("=====================sound interpolation algorithm:=================== \n");
    PRINTF("sound interp times	= %f\n",numIntp);
    PRINTF("sound ceof size = %d\n", numAfterP);
    PRINTF("sound ceof SPECTRUM speed = %d\n", spectrumSpeed);
    int i;
    for (i = 0; i < numAfterP; i ++) {
        coef[i] = (short)(i * 256 / numIntp);
        //PRINTF("SOUND coef data %d = %d\n", i, coef[i]);
    }

    m_fpga.SendSoundIntpNum(numAfterP);
    m_fpga.SendSoundIntpCoef(coef, numAfterP);

    free(coef);
}

int CalcPw::CalcFocPulse(int freq, int power, int &pulseWidth) {
    int freqTemp = 0;
    if (freq > 150)
        freqTemp = 150;
    else
        freqTemp = freq;
#ifdef EMP_355
    int pulseCycle = (int)((float)(CLOCK_EMIT * 10) /  freqTemp + 0.5);
#else
    int pulseCycle = (int)((float)600 /  freqTemp + 0.5);
#endif
    int pulseW = pulseCycle * power / 100;

    // must do like this, unsure pulseCycle and pulseWidth is not 0
    if (pulseCycle == 0)
        pulseCycle = 1;
    if (pulseW == 0)
        pulseW = 1;

    m_pulseCycle = pulseCycle;
    pulseWidth = pulseW;

    //send foc pulse
    m_fpga2D.SendColorPulseCycle(pulseCycle);

    //send foc pulse for test
    m_fpga2D.SendColorPulseWidthBak(pulseW);

    return pulseCycle;
}

void CalcPw::CalcSoundStatus(int data) {
    m_fpga.SendSoundStatus((INT16U)data);
}

/*
 *@brief calc Band pass filter(match filter) according to num of pulse width(60MHZ)
 */
void CalcPw::CalcBandPassFilter(int pulseNum) {
    unsigned short *filter = NULL;
    PRINTF("ENTER band pass pulseNum = %d\n", pulseNum);

    if (pulseNum > 23)
        pulseNum = 23;

    filter = (unsigned short*)BAND_PASS_FILTER_1[pulseNum-1];

    m_fpga2D.SendMatchFilterPw(filter, BAND_PASS_FILTER_SIZE);
}

/*
 *@brief calc Band pass filter(match filter) according to num of pulse width(60MHZ)
 */
void CalcPw::CalcBandPassFilter_test(int pulseNum, int bplist) {
    unsigned short *filter = NULL;
    PRINTF("ENTER band pass pulseNum = %d\n", pulseNum);

    if (pulseNum > 23)
        pulseNum = 23;

    switch(bplist) {
    case 1:
        filter = (unsigned short*)BAND_PASS_FILTER_1[pulseNum-1];
        break;
    case 2:
        filter = (unsigned short*)BAND_PASS_FILTER_2[pulseNum-1];
        break;
    case 3:
        filter = (unsigned short*)BAND_PASS_FILTER_3[pulseNum-1];
        break;
    case 4:
        filter = (unsigned short*)BAND_PASS_FILTER_4[pulseNum-1];
        break;
    case 5:
        filter = (unsigned short*)BAND_PASS_FILTER_5[pulseNum-1];
        break;
    case 6:
        filter = (unsigned short*)BAND_PASS_FILTER_6[pulseNum-1];
        break;
    case 7:
        filter = (unsigned short*)BAND_PASS_FILTER_7[pulseNum-1];
        break;
    case 8:
        filter = (unsigned short*)BAND_PASS_FILTER_8[pulseNum-1];
        break;
    }

    m_fpga2D.SendMatchFilterPw(filter, BAND_PASS_FILTER_SIZE);
}
/*
 *  *@brief calc Band pass filter(match filter) according to num of pulse width(60MHZ)
 *   */
void CalcPw::CalcBandPassFilter_new(int halfpulseCylce, float fc_offset) {
    const int size = BAND_PASS_FILTER_SIZE;
    unsigned short *ptrFilter = new unsigned short[size];
    memset(ptrFilter, 0, sizeof(ptrFilter));
    float fs = SAMPLE_FREQ;
    int order = 62;
    int windowType = 0;
    //float f0 = (float)(CLOCK_EMIT * 10) / (float)halfpulseCylce;
    float f0 = (float)(CLOCK_EMIT) / (float)halfpulseCylce / 2.0;
    float fc1 = f0 - fc_offset;
    float fc2 = f0 + fc_offset;
    PRINTF("------%s-------bandpass filter halfpulseCylce= %d emit= %d f0= %f\n", __FUNCTION__, halfpulseCylce, CLOCK_EMIT, f0);
    PRINTF("fc1= %f fc2= %f, order= %d  fs=%f\n", fc1, fc2, order, fs);

    BandPassFilterFunction(ptrFilter, fc1, fc2, order, fs, windowType);
    m_fpga2D.SendMatchFilterPw(ptrFilter, BAND_PASS_FILTER_SIZE);
    delete []ptrFilter;
}

double CalcPw::CalcScaleTime(int spectrumSpeed, int prf) {
    double scale = (double)spectrumSpeed / prf;
    //PRINTF("=========================scale time scale = %f\n", scale);

    return scale;
}

/*
 * @brief calc scale of velocity
 *
 * @para prf[in] real prf
 * @para colorFreq[in] (frequency * 20) of color mode
 * @para angle[in] correct angle, unit: degree
 * @para soundSpeed[in] speed of ultra-sound, unit: m/s
 * @para pixels[in] number of dots all velocity covers.
 *
 * @retval scale, unit:(cm/s)/p
 */
double CalcPw::CalcScaleVel(int prf, int colorFreq, int angle, double soundSpeed, int pixels) {
    //PRINTF("******************************prfIndex = %d, colorFreq = %d, angle = %d, sound = %f, dots = %d\n", prfIndex, colorFreq, angle, soundSpeed, pixels);
    double maxVel = CalcMaxVel(prf, colorFreq, angle, soundSpeed);
    double scale = maxVel / pixels;
    //PRINTF("max vel = %f\n", maxVel);
    //PRINTF("scale vel = %f\n", scale);

    return scale;
}

/*
 * @brief get current max velocity
 *
 * @para prf[in] real prf of pw
 * @para colorFreq[in] (frequency * 20) of color mode, unit:Mhz
 * @para angle[in] correct angle, unit: degree
 * @para soundSpeed[in] speed of ultra-sound, unit: m/s
 *
 * @retval max velocity, unit: cm/s
 */
double CalcPw::CalcMaxVel(int prf, int colorFreq, int angle, double soundSpeed) {
    int freq = (float)colorFreq / 20 * 1000000; //hz
    double angle_radians = angle * PI / 180;

    double maxVel = (soundSpeed * prf / 4 / freq/ cos(angle_radians)) * 100; //cm/s
    return maxVel;
}

/*
 * @brief calc pw sample(sample dot IMG_H(440), sample freq 60Mhz, sample depth "depth")
 * @para depth[in] sample depth, changed with sv pos, unit:mm
 * @para soundSpeed[in] speed of sound(normal:1540m/s), changed with TSI
 */
void CalcPw::CalcHDotSample(int depth, double soundSpeed) {
    const int DOTS = IMG_H;
    const int SAMPLE_NUM = 65536;
    const int FREQ = SAMPLE_FREQ;//60; //Mhz

    int sample = (int)(soundSpeed * SAMPLE_NUM * DOTS / 2 / FREQ / depth + 0.5);	//60MHz采样频率IMG_H点

    PRINTF("===== PW SampleRate = %d \n",sample);

    ///> send samplePw
    m_fpga.SendPwSample(sample);
}

int CalcPw::GetPulseCycleNum() {
    return m_pulseCycle;
}

void CalcPw::CalcRGBSampleDots(int dots) {
    m_fpga.SendPwRGBSampleDots(dots);
}
void CalcPw::CalcRGBSampleCoef(unsigned short* table, int size) {
    m_fpga.SendPwRGBSampleCoef(table, size);
}

void CalcPw::CalcSoundStopDot(int prf) {
    int data = 50* 10000 / prf;
    if (data > 127)
        data = 127;
    m_fpga.SendPwSoundStopDot(data);
}

void CalcPw::CalcPwImgCtrl(bool on) {
    m_fpga.SendPwImgCtrl(on);
}

void CalcPw::CalcPwImgCtrlPara(int offLineNum) {
    m_fpga.SendPwImgCtrlPara(offLineNum);
}

void CalcPw::CalcCwImgCtrl(bool on) {
    m_fpga.SendCwImgCtrl(on);
}

// private
double CalcPw::GetMaxPeriod(int prf) {
    double maxPeriod = 1000000 / prf - FOC_LOW_TIME;// + HPRF_CORRECT;

    return maxPeriod;
}

int CalcPw::GetMaxSoundFilter(void) {
    return MAX_SOUND_FILTER;
}
int CalcPw::GetHPRFIndex(float svBegin, float svEnd) {
    float beginT = svBegin*2/SOUND_SPEED; //us
    float endT = svEnd*2/SOUND_SPEED ;
//	float svLenT = endT- beginT;
    int index;

    int prf = 8000;
    float emitCycle8k = 1000000/prf + HPRF_CORRECT; //us
    int num8k = GetHPRFEmitNum(emitCycle8k, beginT)+1;

    prf = 6000;
    float emitCycle6k = 1000000/prf;// + HPRF_CORRECT;
    int num6k = GetHPRFEmitNum(emitCycle6k,beginT)+1;

    if(beginT < (emitCycle8k - HPRF_CORRECT - FOC_LOW_TIME))
        index = 14; //8000
    else if ((beginT >=(num8k*emitCycle8k -HPRF_CORRECT - FOC_LOW_TIME)) && (endT <= (num8k*emitCycle8k + FOC_LOW_TIME + HPRF_CORRECT)))
        index = 10; //6000
    else  if((beginT >=(num6k*emitCycle6k-HPRF_CORRECT - FOC_LOW_TIME)) && (endT <= (num6k*emitCycle6k + FOC_LOW_TIME + HPRF_CORRECT)))
        index = 14; //5000
    else
        index = 14; //8000

    PRINTF("============== HPRF: prfindex = %d, num8k = %d, num6k = %d, emitCycle8k = %.3f, emitCycle6k = %.3f \n",index,num8k,num6k,emitCycle8k,emitCycle6k);
    return index;
}

int CalcPw::GetHPRFEmitNum(float emitT, float recvT) {
    return recvT/emitT;
}

int CalcPw::SVPosPRFToHPRF(float &depthBegin, float &depthEnd, int prf) {
    PRINTF("=================  HPRFaaaaaaa:  depthBegin: %.2f  soundSpeed = %.2f\n", depthBegin, SOUND_SPEED);
    //calc interval time between the latest emit and the first emit.unit:us.
    float svLen =(float)(depthEnd - depthBegin) * 10.0;;
    float cycle = (float)1000000/prf + HPRF_CORRECT;
    int num = (int)(depthBegin*2/SOUND_SPEED/cycle);
    float emitInterval = num * cycle;
    float emitDepth = emitInterval * SOUND_SPEED / 2;
    depthBegin = depthBegin - emitDepth;
    depthEnd = depthEnd - emitDepth;

    //实践得出来的校验公式
    float prfDepth = (float)((1000000.0/prf - FOC_LOW_TIME) * 1.54)/(float)2.0;
    if(depthBegin > prfDepth) {
        depthBegin = prfDepth - (float)svLen/20;
        depthEnd = depthBegin + (float)svLen/10;
    }

    PRINTF("=================  HPRF:  num: %d  cycle = %.2f  emitInterval = %.2f\n", num, cycle,  emitInterval);

    PRINTF("=================  HPRF:  emitDepth = %.2f,  depthBegin =  %.2f, depthEnd = %.5f \n",emitDepth,depthBegin,depthEnd);
    return num;
}

/*
 * @brief get emit dots of HPRF
 * @para prf [in] pulse repeat freq, unit: Hz
 * @para svPos[in] pos of SV in dots
 * @para soundSpeed[in] speed of sound, unit: km/s
 * @para scale[in] scale in image height
 *
 * @ret vector included emit dots of HPRF
 */
vector<int> CalcPw::GetHPRFEmitPos(int prf, int svPos, double soundSpeed, float scale) {
    vector<int> emitDots;
    emitDots.clear();

    int num = (int)(svPos * scale * 2 / soundSpeed * prf / 1000000);
    if(num <= 0)
        return emitDots;

    int temp = 0;
    int i;
    for(i = 0; i < num; i++) {
        temp = svPos - (int)((float)1000000 * (i+1) * soundSpeed / prf / 2 / scale);
        emitDots.push_back(temp);
    }

    return emitDots;
}
