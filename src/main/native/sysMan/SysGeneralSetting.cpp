#include <string>
#include "sysMan/SysGeneralSetting.h"
#include "base/IniFile.h"
#include "Def.h"

using std::string;

SysGeneralSetting::SysGeneralSetting() {
    char path[256];
    sprintf(path, "%s/%s", CFG_RES_PATH, SYS_SETTING_FILE);
    ptrIni = new IniFile(path);
}

SysGeneralSetting::~SysGeneralSetting() {
    if (ptrIni != NULL) {
        delete ptrIni;
        ptrIni = NULL;
    }
}

void SysGeneralSetting::GetHospital(string& hospital) {
    hospital = ptrIni->ReadString("GeneralSetting", "Hospital");
}

/**
 * @return language: 0-english / 1-chinese
 */
int SysGeneralSetting::GetLanguage(void) {
    return ptrIni->ReadInt("GeneralSetting", "Language");
}

#ifdef TRANSDUCER
int SysGeneralSetting::GetPressAjust(void) {
    return ptrIni->ReadInt("GeneralSetting", "PressAjust");
}
#endif

/**
 * @return language: 0-Y/M/D 1-M/D/Y 2-D/M/Y
 */
int SysGeneralSetting::GetDateFormat(void) {
    return ptrIni->ReadInt("GeneralSetting", "DateFormat");
}

/**
 * @return videoMode: 0-PAL / 1-NTSC
 */
int SysGeneralSetting::GetVideoMode(void) {
    return ptrIni->ReadInt("GeneralSetting", "VideoMode");
}

int SysGeneralSetting::GetVideoFormat(void) {
    return ptrIni->ReadInt("GeneralSetting", "VideoDisplayFormat");
}

/**
 * @return ConnectorType: 0-Mainboard / 1-Q7
 */
int SysGeneralSetting::GetConnectorType(void) {
    return ptrIni->ReadInt("GeneralSetting", "ConnectorType");
}

int SysGeneralSetting::GetPrinterMethod(void) {
    return ptrIni->ReadInt("GeneralSetting", "PrinterMethod");
}

int SysGeneralSetting::GetPrinter(void) {
    return ptrIni->ReadInt("GeneralSetting" , "Printer");
}

/**
 * @return screenProtect: 0-no / 5,10,20,30,45,60
 */
int SysGeneralSetting::GetScreenProtect(void) {
    int screenProtect = ptrIni->ReadInt("GeneralSetting", "ScreenProtect");

    int ScreenSaver;
    switch (screenProtect) {
    case 0:
        ScreenSaver = 0;
        break;
    case 1:
        ScreenSaver = 5;
        break;
    case 2:
        ScreenSaver = 10;
        break;
    case 3:
        ScreenSaver = 20;
        break;
    case 4:
        ScreenSaver = 30;
        break;
    case 5:
        ScreenSaver = 45;
        break;
    case 6:
        ScreenSaver = 60;
        break;
    default:
        ScreenSaver = 0;
    }
    return ScreenSaver;
}

/**
 * @return PrintViewMode: 0: Adjust size for window, 1: Image SIze
 */
int SysGeneralSetting:: GetPrintViewMode(void) {
    return ptrIni->ReadInt("GeneralSetting" , "PrintViewMode");
}

/**
 * @param PrintViewMode:Set the parameter from SYS FILE
 */
void SysGeneralSetting::SetPrintViewMode(int viewMode) {
    ptrIni->WriteInt("GeneralSetting", "PrintViewMode", viewMode);
}

/**
 * @return AutoGeneratedID: 0: FALSE, 1: TRUE
 */
int SysGeneralSetting:: GetAutoGeneratedID(void) {
    return ptrIni->ReadInt("GeneralSetting" , "AutoGeneratedID");
}

/**
 * @param AutoGeneratedID:Set the parameter from AutoGeneratedID
 */
void SysGeneralSetting::SetAutoGeneratedID(int Auto) {
    ptrIni->WriteInt("GeneralSetting", "AutoGeneratedID", Auto);
}

int SysGeneralSetting::GetFID(void) {
    return ptrIni->ReadInt("GeneralSetting" , "FID");
}

/**
 * @param hospital[]:get the parameter from gui and save it
 */
void SysGeneralSetting::SetHospital(const char *hospital) {
    ptrIni->WriteString("GeneralSetting", "Hospital", hospital);
}

/**
 * @param language: 0-english / 1-chinese
 */
void SysGeneralSetting::SetLanguage(int language) {
    ptrIni->WriteInt("GeneralSetting", "Language", language);
}

#ifdef TRANSDUCER
void SysGeneralSetting::SetPressAdjust(double PressAjust) {
    ptrIni->WriteInt("GeneralSetting", "PressAjust", PressAjust);
}
#endif

/**
 * @param language: 0-Y/M/D / 1-M/D/Y 2-D/M/Y
 */
void SysGeneralSetting::SetDateFormat(int format) {
    ptrIni->WriteInt("GeneralSetting", "DateFormat", format);
}

/**
 * @param videoMode: 0-PAL / 1-NTSC
 */
void SysGeneralSetting::SetVideoMode(int videoMode) {
    ptrIni->WriteInt("GeneralSetting", "VideoMode", videoMode);
}

/**
 * @param ConnectorType: 0-Mainboard / 1-Q7
 */
void SysGeneralSetting::SetConnectorType(int connectorType) {
    ptrIni->WriteInt("GeneralSetting", "ConnectorType", connectorType);
}

void SysGeneralSetting::SetVideoFormat(int format) {
    ptrIni->WriteInt("GeneralSetting", "VideoDisplayFormat", format);
}

void SysGeneralSetting::SetPrinterMethod(int method) {
    ptrIni->WriteInt("GeneralSetting", "PrinterMethod", method);
}

/**
 * @param printer: 0-inkjet / 1-laser / 2-video
 */
void SysGeneralSetting::SetPrinter(int printer) {
    ptrIni->WriteInt("GeneralSetting", "Printer", printer);
}

/**
 * @param screenProtect: 0-no / 5,10,20,30,45,60
 */
void SysGeneralSetting::SetScreenProtect(int screenProtect) {
    ptrIni->WriteInt("GeneralSetting", "ScreenProtect", screenProtect);
}

void SysGeneralSetting::SyncFile(void) {
    ptrIni->SyncConfigFile();
}

/**
 *
 */
void SysGeneralSetting::DefaultFactory(void) {
    ptrIni->WriteInt("GeneralSetting", "TimeFormat", 0);
    ptrIni->WriteInt("GeneralSetting", "Language", 0);
    ptrIni->WriteInt("GeneralSetting", "DateFormat", 0);
    ptrIni->WriteInt("GeneralSetting", "PrinterMethod", 0);
    ptrIni->WriteInt("GeneralSetting", "Printer", 0);
    ptrIni->WriteInt("GeneralSetting", "ScreenProtect", 0);
}

void SysGeneralSetting::TVOutDefaultFactory(void) {
    ptrIni->WriteInt("GeneralSetting", "VideoMode", 0);
    //ptrIni->WriteInt("GeneralSetting", "ConnectorType", 0);
    ptrIni->WriteInt("GeneralSetting", "VideoDisplayFormat", 0);
}

int SysGeneralSetting::GetDirection(void) {
    return ptrIni->ReadInt("PwMenuSetting", "TraceDirection");
}
void SysGeneralSetting::SetDirection(int direction) {
    ptrIni->WriteInt("PwMenuSetting", "TraceDirection", direction);
}

int SysGeneralSetting::GetScaleUnit(void) {
    return ptrIni->ReadInt("PwMenuSetting", "ScaleUnit");
}

void SysGeneralSetting::SetScaleUnit(int scaleunit) {
    ptrIni->WriteInt("PwMenuSetting", "ScaleUnit", scaleunit);
}

int SysGeneralSetting::GetTraceType(void) {
    return ptrIni->ReadInt("PwMenuSetting", "TraceType");
}

void SysGeneralSetting::SetTraceType(int tracetype) {
    ptrIni->WriteInt("PwMenuSetting", "TraceType", tracetype);
}

int SysGeneralSetting::GetSmooth(void) {
    return ptrIni->ReadInt("PwMenuSetting", "TraceSmooth");
}

void SysGeneralSetting::SetSmooth(int smooth) {
    ptrIni->WriteInt("PwMenuSetting", "TraceSmooth", smooth);
}

int SysGeneralSetting::GetThreshold(void) {
    return ptrIni->ReadInt("PwMenuSetting", "TraceThreshold");
}

void SysGeneralSetting::SetThreshold(int threshold) {
    ptrIni->WriteInt("PwMenuSetting", "TraceThreshold", threshold);
}
